{"version":3,"sources":["sevenguis/flight_booker.cljs"],"mappings":"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","names":["sevenguis.flight-booker/date-separator","sevenguis.flight-booker/notation","sevenguis.flight-booker/date-notation-order","sevenguis.flight-booker/date-format","clojure.string.join","iter__4529__auto__","s__75190","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__75192","cljs.core/chunk-buffer","i__75191","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75189","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","time-period","sevenguis.flight-booker/pattern-for","sevenguis.flight-booker/date-pattern","cljs.core/re-pattern","s__75226","b__75228","i__75227","iter__75225","p__75234","map__75235","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sevenguis.flight-booker/actual-date?","month","day","year","date-candidate","js/Date","parsed-month","parsed-day","parsed-year","cljs.core._EQ_","this__4380__auto__","k__4381__auto__","this__4382__auto__","k75245","else__4383__auto__","G__75249","cljs.core/Keyword","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__75250","vec__75251","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__75244","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this75246","other75247","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__75263","cljs.core/keyword-identical?","expr__75264","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-conj","sevenguis.flight-booker/Date","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__75248","extmap__4419__auto__","G__75269","cljs.core/record?","sevenguis.flight-booker/->Date","sevenguis.flight-booker/map->Date","sevenguis.flight-booker/today","now","sevenguis.flight-booker/is-before-or-same-as","date1","date2","cljs.core/compare","sevenguis.flight-booker/already-happened?","date","sevenguis.flight-booker/flight-types","sevenguis.flight-booker/default-flight-type","sevenguis.flight-booker/booking-states","sevenguis.flight-booker/matches-date-format?","s","v","p1__75280#","cljs.core.fnil","cljs.core/re-matches","sevenguis.flight-booker/str->Date","date-keys","date-values","clojure.string.split","cljs.core.map","js/parseInt","parse-attempt","cljs.core.interleave","sevenguis.flight-booker/bad-input?","date-str","cljs.core/not","js/sevenguis","js/sevenguis.flight-booker","js/sevenguis.flight-booker.!app-db","sevenguis.flight-booker/!app-db","reagent.core.atom","sevenguis.flight-booker/!flight-type","reagent.core/cursor","sevenguis.flight-booker/!one-way?","reagent.core/track","cljs.core/deref","sevenguis.flight-booker/!departure-input","sevenguis.flight-booker/!return-input","sevenguis.flight-booker/success-states","sevenguis.flight-booker/success-state","departure-input","return-input","one-way?","departure-date-attempt","return-date-attempt","cljs.core/not-every?","cljs.core/some?","cljs.core/some","sevenguis.flight-booker/!success-state","sevenguis.flight-booker/message","sevenguis.flight-booker/!modal","cljs.core.atom","p__75289","map__75290","sevenguis.flight-booker/modal","!modal-element","text","button-text","p1__75288#","times-symbol","cljs.core/reset!","modal","p1__75294#","p1__75295#","p1__75296#","sevenguis.flight-booker/flight-booker2","cljs.core.keyword","fexpr__75300","cljs.core/chunk-first"],"sourcesContent":["(ns sevenguis.flight-booker\n  (:require\n    [reagent.core :as r]\n    [clojure.string :as str]\n    [sevenguis.util :as util]))\n\n(def date-separator \\/)\n\n(def notation {:month \"mm\"\n               :day   \"dd\"\n               :year  \"yyyy\"})\n(def date-notation-order [:month :day :year])\n\n(def date-format (str/join date-separator\n                           (for [time-period date-notation-order]\n                             (time-period notation))))\n\n(def pattern-for {:month \"\\\\d{2}\"\n                  :day   \"\\\\d{2}\"\n                  :year  \"\\\\d{4}\"})\n\n(def date-pattern (re-pattern (str \\^\n                                   (str/join\n                                     date-separator\n                                     (for [time-period date-notation-order]\n                                       (time-period pattern-for)))\n                                   \\$)))\n\n(defn actual-date? [{:keys [month day year]}]\n  \"Use js date to determine whether this date will/did occur. \"\n  \"If a date has never/will never occur, the js/Date constructor will \"\n  \"roll over to a real date, and this causes the parsed value and the \"\n  \" given value to be different.\"\n  (let [date-candidate (js/Date. year (- month 1) day)\n        parsed-month (-> date-candidate .getMonth (+ 1))\n        parsed-day (.getDate date-candidate)\n        parsed-year (.getFullYear date-candidate)]\n    (= [month day year] [parsed-month parsed-day parsed-year])))\n\n(defrecord Date [month day year])\n\n(defn today []\n  (let [now (js/Date.)\n        month (-> now .getMonth (+ 1))\n        day (.getDate now)\n        year (.getFullYear now)]\n    (->Date month day year)))\n\n(defn is-before-or-same-as [date1 date2]\n  (<= (compare [(:year date1) (:month date1) (:day date1)]\n               [(:year date2) (:month date2) (:day date2)])\n      0))\n\n(defn already-happened? [date]\n  (not (-> (today) (is-before-or-same-as date))))\n\n(def flight-types {:one-way :round-trip})\n\n(def default-flight-type :one-way)\n\n(def booking-states {:not-ready\n                     :date-in-the-past\n                     :dates-out-of-order\n                     :success})\n\n(defn matches-date-format? [s]\n  (as-> s v\n        ((fnil #(re-matches date-pattern %) \"\") v)\n        (some? v)))\n\n(defn str->Date [s]\n  (when (matches-date-format? s)\n    (let [date-keys date-notation-order\n          date-values (->> (str/split s date-separator)\n                           (map js/parseInt))\n          parse-attempt (->> (interleave date-keys date-values)\n                             (apply hash-map)\n                             (map->Date))]\n      (when (actual-date? parse-attempt)\n        parse-attempt))))\n\n(defn bad-input? [date-str]\n  (cond\n    (not date-str) false\n    (= date-str \"\") false\n    (not (str->Date date-str)) true\n    :else false))\n\n(defonce !app-db (r/atom {:flight-type     default-flight-type\n                          :departure-input nil\n                          :return-input    nil}))\n(def !flight-type (r/cursor !app-db [:flight-type]))\n(def !one-way? (r/track #(= @!flight-type :one-way)))\n\n(def !departure-input (r/cursor !app-db [:departure-input]))\n\n(def !return-input (r/cursor !app-db [:return-input]))\n\n(def success-states {:not-ready\n                     :date-in-the-past\n                     :dates-out-of-order\n                     :success})\n\n(defn success-state [departure-input return-input one-way?]\n  (let [departure-date-attempt (str->Date departure-input)\n        return-date-attempt (str->Date return-input)]\n    (cond\n      one-way? (cond\n                 (not (matches-date-format? departure-input)) :not-ready\n                 (not departure-date-attempt) :not-ready\n                 (already-happened? departure-date-attempt) :date-in-the-past\n                 :else :success)\n      :else (cond\n              (not-every? matches-date-format? [departure-input return-input]) :not-ready\n              (not-every? some? [departure-date-attempt return-date-attempt]) :not-ready\n              (some already-happened? [departure-date-attempt return-date-attempt]) :date-in-the-past\n              (not (is-before-or-same-as departure-date-attempt return-date-attempt)) :dates-out-of-order\n              :else :success))))\n\n(def !success-state (r/track #(success-state @!departure-input @!return-input @!one-way?)))\n\n(def message {:not-ready          nil\n              :date-in-the-past   (str \"We regret to inform you that at least one of the dates \"\n                                       \"you have chosen is in the past.\")\n              :dates-out-of-order \"Unfortunately, it is impossible to return before you depart.\"\n              :success            \"You're all set!\"})\n\n(def !modal (atom nil))\n\n(defn modal [{:keys [!modal-element text button-text]}]\n  (let [times-symbol \\u00D7]\n    [:dialog {:ref #(reset! !modal-element %)}\n     [:div.dialog-close-wrapper\n      [:span.dialog-close {:on-click #(when-let [modal @!modal-element]\n                                        (.close modal))}\n       times-symbol]]\n     [:p text]\n     (when button-text [:button button-text])]))\n\n(defn flight-booker2 []\n  [:div.gui.flight-booker\n   [:select {:on-change #(reset! !flight-type (keyword (.. % -target -value)))}\n    [:option {:value :one-way} \"One-way flight\"]\n    [:option {:value :round-trip} \"Round-trip flight\"]]\n   [:input {:value       @!departure-input\n            :className   (when (bad-input? @!departure-input) \"bad-input\")\n            :placeholder date-format\n            :on-change   #(reset! !departure-input (.. % -target -value))}]\n   [:input {:value       (when-not @!one-way? @!return-input)\n            :className   (when (and\n                                 (not @!one-way?)\n                                 (bad-input? @!return-input)) \"bad-input\")\n            :placeholder (when-not @!one-way? date-format)\n            :on-change   #(reset! !return-input (.. % -target -value))\n            :disabled    @!one-way?}]\n   [:button#book-button {:on-click #(when-let [modal @!modal]\n                                      (.showModal modal))\n                         :disabled (= @!success-state :not-ready)}\n    \"Book!\"]\n   [modal {:!modal-element !modal\n           :text          (@!success-state message)}]])\n\n\n"]}