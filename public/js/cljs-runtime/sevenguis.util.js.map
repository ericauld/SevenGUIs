{"version":3,"sources":["sevenguis/util.cljs"],"mappings":"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","names":["p__75010","p__75011","vec__75012","cljs.core.nth","vec__75015","sevenguis.util/sqr-distance-2d","x1","y1","x2","y2","vec__75018","d1","d2","cljs.core.mapv","cljs.core/-","js/Math.pow","sevenguis.util/coords-rel","!element-ref","event","temp__5735__auto__","cljs.core/deref","element","rect","sevenguis.util/within","tolerance","float1","float2","js/Math.abs","sevenguis.util/get-event-value","sevenguis.util/button","listener","text","p__75021","map__75022","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sevenguis.util/modal","set-ref-func","close-modal","button-text","times-symbol","confirm","_e","p__75024","map__75025","sevenguis.util/context-menu","options-and-listeners","!visible?","!position","with-cancel?","cancel-listener","G__75027","G__75028","G__75029","cljs.core.into","iter__4529__auto__","s__75031","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__75033","cljs.core/chunk-buffer","i__75032","vec__75034","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75030","cljs.core/chunk-rest","vec__75037","cljs.core/first","cljs.core/cons","cljs.core/rest","option-name","_","cljs.core/reset!","cljs.core.conj","sevenguis.util/get-bubble-left","slider-position","bubble-scale","bubble-shift","left-position","p__75040","map__75041","sevenguis.util/range-with-bubble","!value","min","max","display-precision","label","step","with-let75043","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__28532__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init75044","res__28533__auto__","!bubble","cljs.core.atom","!show-bubble?","reagent.core.atom","!slider-position","reagent.core/track","!bubble-left","e","js/parseFloat","ref","cljs.core/not","G__75045","sevenguis.util/canvas","sevenguis.util/get-text-width","font","js/document","context","sevenguis.util/get-suffix-left","width","offset","p__75048","map__75049","sevenguis.util/input-with-suffix","value-update","placeholder","hide-suffix?","suffix","with-let75051","init75052","p1__75046#","p1__75047#","!suffix-element","G__75053","p__75054","map__75055","sevenguis.util/filtered-list","item->str","!items","!keep?","!focus","size","!selected-item-index","v","js/parseInt","cljs.core.keep_indexed","index","item","and__4115__auto__","fexpr__75057","cljs.core/chunk-first"],"sourcesContent":["(ns sevenguis.util\n  (:require\n    [reagent.core :as r]\n    [clojure.string :as str]))\n\n(defn sqr-distance-2d [[x1 y1] [x2 y2]]\n  (let [[d1 d2] (mapv - [x2 y2] [x1 y1])]\n    (+\n      (js/Math.pow d1 2)\n      (js/Math.pow d2 2))))\n\n(defn coords-rel [!element-ref event]\n  (when-let [element @!element-ref]\n    (let [rect (.getBoundingClientRect element)]\n      (mapv -\n            [(.-clientX event) (.-clientY event)]\n            [(.-left rect) (.-top rect)]))))\n\n(defn within [tolerance float1 float2]\n  (< (js/Math.abs (- float2 float1)) tolerance))\n\n(defn get-event-value [event]\n  (.. event -target -value))\n\n(defn button [listener text]\n  [:button.button {:on-click listener} text])\n\n(defn modal [{:keys [text set-ref-func listener close-modal button-text]}]\n  (let [times-symbol \\u00D7\n        confirm (fn [_e]\n                  (close-modal)\n                  (when listener\n                    (listener)))]\n    [:dialog {:ref set-ref-func}\n     [:div.dialog-close-wrapper\n      [:span.dialog-close {:on-click close-modal} times-symbol]]\n     [:p text]\n     (when button-text [:button {:on-click confirm} button-text])]))\n\n(defn context-menu [{:keys [options-and-listeners\n                            !visible?\n                            !position\n                            with-cancel?\n                            cancel-listener]}]\n  \"Options-and-listeners is a map with keys strings which are the name of the desired menu option,\n  and values the listener which you want executed when the user clicks on that option. Your listener\n  doesn't need to bother hiding the context menu; that will be done automatically.\n  If with-cancel? is true, a cancel option will be added to the bottom of the context menu.\n  If you simply want it to close the context menu, you need not add a listener for it; if you\n  want it to do other things as well, add a cancel-listener.\"\n  [:div.context-menu {:className (when @!visible? \"show\")\n                      :style     {:top  (some-> @!position (nth 1))\n                                  :left (some-> @!position (nth 0))}}\n   (cond-> (into [:ul]\n                 (for [[option-name listener] options-and-listeners]\n                   [:li {:on-click (fn on-click-context-menu-option [_]\n                                     (listener)\n                                     (reset! !visible? false))}\n                    option-name]))\n           with-cancel? (conj [:hr.context-menu-rule]\n                              [:li.context-menu-cancel {:on-click (fn on-click-cancel [_]\n                                                                    (when cancel-listener\n                                                                      (cancel-listener))\n                                                                    (reset! !visible? false))}\n                               \"Cancel\"]))])\n\n(defn get-bubble-left [slider-position bubble-scale bubble-shift]\n  (let [left-position (+ (* slider-position bubble-scale) bubble-shift)]\n    (str left-position \"px\")))\n\n(defn range-with-bubble [{:keys [!value\n                                 min\n                                 max\n                                 bubble-scale\n                                 bubble-shift\n                                 display-precision\n                                 label\n                                 step]}]\n  \"Bubble scale and bubble shift are finicky constants to get the\n  bubble to follow the slider button closely.\"\n  (r/with-let [!bubble (atom nil)\n               !show-bubble? (r/atom false)\n               !slider-position (r/track #(/ (- @!value min) (- max min)))\n               !bubble-left (r/track #(get-bubble-left @!slider-position bubble-scale bubble-shift))]\n    [:div.range-wrap\n     [:input.range {:step          (if step step 1)\n                    :type          \"range\"\n                    :value         (if @!value @!value \"\")\n                    :min           min\n                    :max           max\n                    :on-input      (fn range-on-input [e] (reset! !value (js/parseFloat (.. e -target -value))))\n                    :on-mouse-down (fn range-mouse-down [_] (reset! !show-bubble? true))\n                    :on-mouse-up   (fn range-mouse-up [_] (reset! !show-bubble? false))}]\n     [:output.bubble {:ref    (fn set-bubble-ref [ref] (reset! !bubble ref))\n                      :hidden (not @!show-bubble?)\n                      :style  {:left @!bubble-left}}\n      (cond-> @!value\n              display-precision js/parseFloat\n              display-precision (.toFixed display-precision)\n              true (str label))]]))\n\n(def canvas (atom nil))\n\n(defn get-text-width [text font]\n  (if-not @canvas\n    (reset! canvas (.createElement js/document \"canvas\")))\n  (let [context (.getContext @canvas \"2d\")]\n    (set! (.-font context) font)\n    (-> context (.measureText text) (.-width))))\n\n(defn get-suffix-left [text font]\n  (let [width (get-text-width text font)\n        offset 6]\n    (str (+ width offset) \"px\")))\n\n(defn input-with-suffix [{:keys [!value\n                                 value-update\n                                 placeholder\n                                 hide-suffix?\n                                 font\n                                 suffix]}]\n  (r/with-let [!suffix-element (atom nil)]\n    [:div.input-with-suffix-wrapper\n     [:input.input-with-suffix {:value       @!value\n                                :on-change   #(value-update (.. % -target -value))\n                                :placeholder placeholder}]\n     [:span.suffix-element {:ref    #(reset! !suffix-element %)\n                            :hidden hide-suffix?\n                            :style  {:left @(r/track #(get-suffix-left @!value font))}}\n      suffix]]))\n\n\n(defn filtered-list [{:keys [item->str\n                             !items\n                             !keep?\n                             !focus\n                             size\n                             !selected-item-index]}]\n  [:div\n   (into [:select#name-list {:size      size\n                             :on-focus  (fn name-list-on-focus [_]\n                                          (reset! !focus :name-list))\n                             :on-blur   (fn name-list-on-blur [_]\n                                          (reset! !focus nil))\n                             :on-change (fn select-on-change [e]\n                                          (reset! !selected-item-index (as-> e v\n                                                                             (.. v -target -value)\n                                                                             (js/parseInt v))))}]\n         (keep-indexed\n           (fn build-option-element [index item]\n             (when (and item (@!keep? item))\n               ^{:key (str index)}\n               [:option.crud-name {:value (str index)} (item->str item)]))\n           @!items))])"]}