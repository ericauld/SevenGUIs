{"version":3,"sources":["sevenguis/crud.cljs"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k75059","else__4383__auto__","G__75063","cljs.core/Keyword","first","last","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__75064","vec__75065","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__75058","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this75060","other75061","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__75068","cljs.core/keyword-identical?","expr__75069","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","sevenguis.crud/Name","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__75062","extmap__4419__auto__","G__75072","cljs.core/record?","sevenguis.crud/->Name","sevenguis.crud/map->Name","sevenguis.crud/initial-names","sevenguis.crud/size-of-name-list-window","sevenguis.crud/format-name","name","sevenguis.crud/allowed-prefix-regex","sevenguis.crud/valid-prefix?","user-input","cljs.core/not","cljs.core/re-matches","js/sevenguis","js/sevenguis.crud","js/sevenguis.crud.!app-db","sevenguis.crud/!app-db","reagent.core.atom","sevenguis.crud/!focus","reagent.core/cursor","sevenguis.crud/!prefix","sevenguis.crud/!names","sevenguis.crud/!selected","sevenguis.crud/!prefix-valid?","reagent.core/track","cljs.core/deref","sevenguis.crud/!first-name-input","sevenguis.crud/!surname-input","sevenguis.crud/!user-input-as-Name","first-name","surname","clojure.string/blank?","sevenguis.crud/matches?","prefix","prefix-pattern","cljs.core/re-pattern","cljs.core/re-find","sevenguis.crud/!matches-prefix?","sevenguis.crud/crud-buttons","_","temp__5735__auto__","reagent.core.rswap_BANG_","cljs.core/conj","cljs.core/reset!","cljs.core/not-every?","cljs.core/some?","cljs.core/assoc","sevenguis.crud/name-input","e","sevenguis.crud/prefix-input","sevenguis.crud/crud","sevenguis.util/filtered-list"],"sourcesContent":["(ns sevenguis.crud\n  (:require\n    [reagent.core :as r]\n    [sevenguis.util :as util]\n    [clojure.string :as str]))\n\n(defrecord Name [first last])\n\n(def initial-names [(->Name \"Joni\" \"Mitchell\")\n                    (->Name \"Trish\" \"Keenan\")\n                    (->Name \"Laura\" \"Viers\")\n                    (->Name \"Cate\" \"Le Bon\")\n                    (->Name \"Verity\" \"Susman\")])\n\n(def size-of-name-list-window 5)\n\n(defn format-name [name] (str (:last name)\n                              \", \"\n                              (:first name)))\n\n(def allowed-prefix-regex #\"^[^\\\\]*$\")\n\n(defn valid-prefix? [user-input]\n  (if-not user-input\n    true\n    (some? (re-matches allowed-prefix-regex user-input))))\n\n(defonce !app-db (r/atom {:name-list           [(->Name \"Joni\" \"Mitchell\")\n                                                (->Name \"Trish\" \"Keenan\")\n                                                (->Name \"Laura\" \"Viers\")\n                                                (->Name \"Cate\" \"Le Bon\")\n                                                (->Name \"Verity\" \"Susman\")]\n                          :prefix-input        nil\n                          :name-input          nil\n                          :surname-input       nil\n                          :focus               nil\n                          :selected-name-index nil}))\n\n(def !focus (r/cursor !app-db [:focus]))\n\n(def !prefix (r/cursor !app-db [:prefix-input]))\n\n(def !names (r/cursor !app-db [:name-list]))\n\n(def !selected (r/cursor !app-db [:selected-name-index]))\n\n(def !prefix-valid? (r/track #(valid-prefix? @!prefix)))\n\n(def !first-name-input (r/cursor !app-db [:name-input]))\n\n(def !surname-input (r/cursor !app-db [:surname-input]))\n\n(def !user-input-as-Name (r/track (fn make-name-from-user-input []\n                                    (let [first-name @!first-name-input\n                                          surname @!surname-input]\n                                      (when (and\n                                              (string? first-name)\n                                              (string? surname)\n                                              (not (str/blank? first-name))\n                                              (not (str/blank? surname)))\n                                        (->Name first-name surname))))))\n\n(defn matches? [prefix name]\n  (if (or (not prefix)\n          (and (string? prefix)\n               (str/blank? prefix)))\n    true\n    (let [prefix-pattern (re-pattern (str \"^\" prefix))]\n      (some? (re-find prefix-pattern (:last name))))))\n\n(def !matches-prefix? (r/track (fn get-prefix-matcher []\n                                 (fn [name]\n                                   (if-not @!prefix-valid?\n                                     false\n                                     (matches? @!prefix name))))))\n\n(defn crud-buttons []\n  [:div.gui-line.button-line\n   [:button {:on-click (fn create-on-click [_]\n                         (when-let [name @!user-input-as-Name]\n                           (r/rswap! !names conj name)\n                           (reset! !first-name-input nil)\n                           (reset! !surname-input nil)))\n             :disabled (not @!user-input-as-Name)}\n    \"Create\"]\n   [:button {:disabled (not-every? some? [@!selected @!user-input-as-Name])\n             :on-click (fn update-on-click [_]\n                         (r/rswap! !names assoc @!selected @!user-input-as-Name)\n                         (reset! !first-name-input nil)\n                         (reset! !surname-input nil))}\n    \"Update\"]\n   [:button {:disabled (not @!selected)\n             :on-click (fn delete-on-click [_]\n                         (r/rswap! !names assoc @!selected nil)\n                         (reset! !selected nil))}\n    \"Delete\"]])\n\n(defn name-input []\n  [:div.crud-column\n   [:div#blank-line.gui-line \" \"]\n   [:div.subcolumn-wrapper\n    [:div.subcolumn\n     [:div.gui-line [:span \"Name:\"]]\n     [:div.gui-line [:span \"Surname:\"]]]\n    [:div.subcolumn\n     [:div.gui-line [:input {:value     @!first-name-input\n                             :on-change (fn name-input-on-change [e]\n                                          (reset! !first-name-input (.. e -target -value)))\n                             :on-focus  (fn name-input-on-focus [_]\n                                          (reset! !focus :name-input))\n                             :on-blur   (fn name-input-on-blur [_]\n                                          (reset! !focus nil))}]]\n     [:div.gui-line [:input {:value     @!surname-input\n                             :on-change (fn surname-input-on-change [e]\n                                          (reset! !surname-input (.. e -target -value)))\n                             :on-focus  (fn surname-input-on-focus [_]\n                                          (reset! !focus :surname-input))\n                             :on-blur   (fn surname-input-on-blur [_]\n                                          (reset! !focus nil))}]]]]])\n\n(defn prefix-input []\n  [:div.gui-line\n   [:span \"Filter prefix:\"]\n   [:input#prefix-input {:className (when-not @!prefix-valid? \"bad-input\")\n                         :on-change (fn on-change-prefix-input [e]\n                                      (reset! !prefix (.. e -target -value)))\n                         :on-focus  (fn prefix-input-on-focus [_]\n                                      (reset! !focus :prefix-input))\n                         :on-blur   (fn prefix-input-on-blur [_]\n                                      (reset! !focus nil))}]])\n\n(defn crud []\n  [:div#crud.gui\n   [:div.crud-column-wrapper\n    [:div.crud-column\n     [prefix-input]\n     [util/filtered-list {:!items               !names\n                          :!keep?               !matches-prefix?\n                          :!focus               !focus\n                          :size                 size-of-name-list-window\n                          :item->str            format-name\n                          :!selected-item-index !selected}]]\n    [name-input]]\n   [crud-buttons]])\n"]}