["^ ","~:output",["^ ","~:js","goog.provide('instaparse.auto_flatten_seq');\ninstaparse.auto_flatten_seq.threshold = (32);\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.ConjFlat = function(){};\n\nvar instaparse$auto_flatten_seq$ConjFlat$conj_flat$dyn_10192 = (function (self,obj){\nvar x__4428__auto__ = (((self == null))?null:self);\nvar m__4429__auto__ = (instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(self,obj) : m__4429__auto__.call(null,self,obj));\n} else {\nvar m__4426__auto__ = (instaparse.auto_flatten_seq.conj_flat[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(self,obj) : m__4426__auto__.call(null,self,obj));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.conj-flat\",self);\n}\n}\n});\ninstaparse.auto_flatten_seq.conj_flat = (function instaparse$auto_flatten_seq$conj_flat(self,obj){\nif((((!((self == null)))) && ((!((self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 == null)))))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self,obj);\n} else {\nreturn instaparse$auto_flatten_seq$ConjFlat$conj_flat$dyn_10192(self,obj);\n}\n});\n\nvar instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$dyn_10202 = (function (self){\nvar x__4428__auto__ = (((self == null))?null:self);\nvar m__4429__auto__ = (instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__4429__auto__.call(null,self));\n} else {\nvar m__4426__auto__ = (instaparse.auto_flatten_seq.cached_QMARK_[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__4426__auto__.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"ConjFlat.cached?\",self);\n}\n}\n});\ninstaparse.auto_flatten_seq.cached_QMARK_ = (function instaparse$auto_flatten_seq$cached_QMARK_(self){\nif((((!((self == null)))) && ((!((self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 == null)))))){\nreturn self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);\n} else {\nreturn instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$dyn_10202(self);\n}\n});\n\n\n\n\n/**\n * Returns the hash code, consistent with =, for an external ordered\n *   collection implementing Iterable.\n *   See http://clojure.org/data_structures#hash for full algorithms.\n */\ninstaparse.auto_flatten_seq.hash_conj = (function instaparse$auto_flatten_seq$hash_conj(unmixed_hash,item){\nreturn (cljs.core.imul((31),unmixed_hash) + cljs.core.hash(item));\n});\ninstaparse.auto_flatten_seq.expt = (function instaparse$auto_flatten_seq$expt(base,pow){\nif((pow === (0))){\nreturn (1);\n} else {\nvar n = (pow | (0));\nvar y = ((1) | (0));\nvar z = (base | (0));\nwhile(true){\nvar t = cljs.core.even_QMARK_(n);\nvar n__$1 = cljs.core.quot(n,(2));\nif(t){\nvar G__10210 = n__$1;\nvar G__10211 = y;\nvar G__10212 = cljs.core.imul(z,z);\nn = G__10210;\ny = G__10211;\nz = G__10212;\ncontinue;\n} else {\nif((n__$1 === (0))){\nreturn cljs.core.imul(z,y);\n} else {\nvar G__10214 = n__$1;\nvar G__10215 = cljs.core.imul(z,y);\nvar G__10216 = cljs.core.imul(z,z);\nn = G__10214;\ny = G__10215;\nz = G__10216;\ncontinue;\n\n}\n}\nbreak;\n}\n}\n});\ninstaparse.auto_flatten_seq.delve = (function instaparse$auto_flatten_seq$delve(v,index){\nvar v__$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index);\nvar index__$1 = index;\nwhile(true){\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(v__$1) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,v__$1)))){\nvar G__10217 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(v__$1,(0));\nvar G__10218 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(index__$1,(0));\nv__$1 = G__10217;\nindex__$1 = G__10218;\ncontinue;\n} else {\nreturn index__$1;\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.advance = (function instaparse$auto_flatten_seq$advance(v,index){\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(index),(1))){\nif((cljs.core.peek(index) < ((instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(v) : instaparse.auto_flatten_seq.true_count.call(null,v)) - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.peek(index) + (1))], null));\n} else {\nreturn null;\n}\n} else {\nif((cljs.core.peek(index) < ((function (){var G__10105 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,cljs.core.pop(index));\nreturn (instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.true_count.cljs$core$IFn$_invoke$arity$1(G__10105) : instaparse.auto_flatten_seq.true_count.call(null,G__10105));\n})() - (1)))){\nreturn instaparse.auto_flatten_seq.delve(v,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.pop(index),(cljs.core.peek(index) + (1))));\n} else {\nvar G__10224 = v;\nvar G__10225 = cljs.core.pop(index);\nv = G__10224;\nindex = G__10225;\ncontinue;\n\n}\n}\nbreak;\n}\n});\ninstaparse.auto_flatten_seq.flat_seq = (function instaparse$auto_flatten_seq$flat_seq(var_args){\nvar G__10110 = arguments.length;\nswitch (G__10110) {\ncase 1:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1 = (function (v){\nif((cljs.core.count(v) > (0))){\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,instaparse.auto_flatten_seq.delve(v,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null)));\n} else {\nreturn null;\n}\n}));\n\n(instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2 = (function (v,index){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn cljs.core.cons(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(v,index),(function (){var temp__5735__auto__ = instaparse.auto_flatten_seq.advance(v,index);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar next_index = temp__5735__auto__;\nreturn instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$2(v,next_index);\n} else {\nreturn null;\n}\n})());\n}),null,null));\n}));\n\n(instaparse.auto_flatten_seq.flat_seq.cljs$lang$maxFixedArity = 2);\n\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeq}\n * @implements {cljs.core.INext}\n * @implements {instaparse.auto_flatten_seq.ConjFlat}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.AutoFlattenSeq = (function (v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nthis.v = v;\nthis.premix_hashcode = premix_hashcode;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.dirty = dirty;\nthis.cached_seq = cached_seq;\nthis.cljs$lang$protocol_mask$partition0$ = 31850958;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(cljs.core.seq(self));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.v.cljs$core$ILookup$_lookup$arity$2(null,key);\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.v.cljs$core$ILookup$_lookup$arity$3(null,key,not_found);\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.meta(self__.v);\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.next(cljs.core.seq(self__$1));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,(0))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.seq(self__$1),other)))));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.EMPTY,cljs.core.meta(self__$1));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.first(cljs.core.seq(self__$1));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.rest(cljs.core.seq(self__$1));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(self__.cached_seq)){\nreturn self__.cached_seq;\n} else {\n(self__.cached_seq = ((self__.dirty)?instaparse.auto_flatten_seq.flat_seq.cljs$core$IFn$_invoke$arity$1(self__.v):cljs.core.seq(self__.v)));\n\nreturn self__.cached_seq;\n}\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta(self__.v,metamap),self__.premix_hashcode,self__.hashcode,self__.cnt,self__.dirty,null));\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,o){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.cons(o,self__$1);\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = cljs.core.PROTOCOL_SENTINEL);\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nif((obj == null)){\nreturn self__$1;\n} else {\nif(cljs.core.truth_((instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1 ? instaparse.auto_flatten_seq.afs_QMARK_.cljs$core$IFn$_invoke$arity$1(obj) : instaparse.auto_flatten_seq.afs_QMARK_.call(null,obj)))){\nif((self__.cnt === (0))){\nreturn obj;\n} else {\nif((cljs.core.count(obj) <= (32))){\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,(function (){var or__4126__auto__ = self__.dirty;\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn obj.dirty;\n}\n})(),null));\n} else {\nvar phc = (instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.hash_cat.cljs$core$IFn$_invoke$arity$2(self__$1,obj) : instaparse.auto_flatten_seq.hash_cat.call(null,self__$1,obj));\nvar new_cnt = (self__.cnt + cljs.core.count(obj));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,true,null));\n\n}\n}\n} else {\nvar phc = instaparse.auto_flatten_seq.hash_conj(self__.premix_hashcode,obj);\nvar new_cnt = (self__.cnt + (1));\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.v,obj),phc,cljs.core.mix_collection_hash(phc,new_cnt),new_cnt,self__.dirty,null));\n\n}\n}\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cached_seq;\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"PersistentVector\",\"PersistentVector\",-837570443,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"premix-hashcode\",\"premix-hashcode\",-1918840795,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"dirty\",\"dirty\",-1924882488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cached-seq\",\"cached-seq\",1369780142,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"ISeq\",\"ISeq\",1517365813,null),new cljs.core.Keyword(null,\"unsynchronized-mutable\",\"unsynchronized-mutable\",-164143950),true], null))], null);\n}));\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true);\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/AutoFlattenSeq\");\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = (function (this__4369__auto__,writer__4370__auto__,opt__4371__auto__){\nreturn cljs.core._write(writer__4370__auto__,\"instaparse.auto-flatten-seq/AutoFlattenSeq\");\n}));\n\n/**\n * Positional factory function for instaparse.auto-flatten-seq/AutoFlattenSeq.\n */\ninstaparse.auto_flatten_seq.__GT_AutoFlattenSeq = (function instaparse$auto_flatten_seq$__GT_AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq){\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v,premix_hashcode,hashcode,cnt,dirty,cached_seq));\n});\n\ninstaparse.auto_flatten_seq.hash_cat = (function instaparse$auto_flatten_seq$hash_cat(v1,v2){\nvar c = cljs.core.count(v2);\nvar e = (instaparse.auto_flatten_seq.expt((31),c) | (0));\nreturn (cljs.core.imul(e,v1.premix_hashcode) + (v2.premix_hashcode - e));\n});\n/**\n * Returns the partially calculated hash code, still requires a call to mix-collection-hash\n */\ninstaparse.auto_flatten_seq.hash_ordered_coll_without_mix = (function instaparse$auto_flatten_seq$hash_ordered_coll_without_mix(var_args){\nvar G__10132 = arguments.length;\nswitch (G__10132) {\ncase 1:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = (function (coll){\nreturn instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2((1),coll);\n}));\n\n(instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = (function (existing_unmixed_hash,coll){\nvar unmixed_hash = existing_unmixed_hash;\nvar coll__$1 = cljs.core.seq(coll);\nwhile(true){\nif((!((coll__$1 == null)))){\nvar G__10269 = ((cljs.core.imul((31),unmixed_hash) + cljs.core.hash(cljs.core.first(coll__$1))) | (0));\nvar G__10270 = cljs.core.next(coll__$1);\nunmixed_hash = G__10269;\ncoll__$1 = G__10270;\ncontinue;\n} else {\nreturn unmixed_hash;\n}\nbreak;\n}\n}));\n\n(instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$lang$maxFixedArity = 2);\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL);\n\n(instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (afs,writer,opts){\nvar afs__$1 = this;\nreturn cljs.core._pr_writer(cljs.core.seq(afs__$1),writer,opts);\n}));\ninstaparse.auto_flatten_seq.auto_flatten_seq = (function instaparse$auto_flatten_seq$auto_flatten_seq(v){\nvar v__$1 = cljs.core.vec(v);\nreturn (new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1,instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1(v__$1),cljs.core.hash(v__$1),cljs.core.count(v__$1),false,null));\n});\ninstaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq(cljs.core.PersistentVector.EMPTY);\ninstaparse.auto_flatten_seq.afs_QMARK_ = (function instaparse$auto_flatten_seq$afs_QMARK_(s){\nreturn (s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq);\n});\ninstaparse.auto_flatten_seq.true_count = (function instaparse$auto_flatten_seq$true_count(v){\nif(instaparse.auto_flatten_seq.afs_QMARK_(v)){\nreturn cljs.core.count(v.v);\n} else {\nreturn cljs.core.count(v);\n}\n});\ninstaparse.auto_flatten_seq.flat_vec_helper = (function instaparse$auto_flatten_seq$flat_vec_helper(acc,v){\nwhile(true){\nvar temp__5733__auto__ = cljs.core.seq(v);\nif(temp__5733__auto__){\nvar s = temp__5733__auto__;\nvar fst = cljs.core.first(v);\nif(instaparse.auto_flatten_seq.afs_QMARK_(fst)){\nvar G__10272 = (instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2 ? instaparse.auto_flatten_seq.flat_vec_helper.cljs$core$IFn$_invoke$arity$2(acc,fst) : instaparse.auto_flatten_seq.flat_vec_helper.call(null,acc,fst));\nvar G__10273 = cljs.core.next(v);\nacc = G__10272;\nv = G__10273;\ncontinue;\n} else {\nvar G__10276 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(acc,fst);\nvar G__10277 = cljs.core.next(v);\nacc = G__10276;\nv = G__10277;\ncontinue;\n}\n} else {\nreturn acc;\n}\nbreak;\n}\n});\n/**\n * Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\n */\ninstaparse.auto_flatten_seq.flat_vec = (function instaparse$auto_flatten_seq$flat_vec(v){\nreturn cljs.core.persistent_BANG_(instaparse.auto_flatten_seq.flat_vec_helper(cljs.core.transient$(cljs.core.PersistentVector.EMPTY),v));\n});\n\n/**\n * @interface\n */\ninstaparse.auto_flatten_seq.GetVec = function(){};\n\nvar instaparse$auto_flatten_seq$GetVec$get_vec$dyn_10282 = (function (self){\nvar x__4428__auto__ = (((self == null))?null:self);\nvar m__4429__auto__ = (instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__4429__auto__.call(null,self));\n} else {\nvar m__4426__auto__ = (instaparse.auto_flatten_seq.get_vec[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$1(self) : m__4426__auto__.call(null,self));\n} else {\nthrow cljs.core.missing_protocol(\"GetVec.get-vec\",self);\n}\n}\n});\ninstaparse.auto_flatten_seq.get_vec = (function instaparse$auto_flatten_seq$get_vec(self){\nif((((!((self == null)))) && ((!((self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 == null)))))){\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);\n} else {\nreturn instaparse$auto_flatten_seq$GetVec$get_vec$dyn_10282(self);\n}\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n * @implements {cljs.core.IVector}\n * @implements {cljs.core.IReversible}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {instaparse.auto_flatten_seq.GetVec}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.IStack}\n * @implements {cljs.core.IComparable}\n * @implements {cljs.core.ISequential}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.ILookup}\n*/\ninstaparse.auto_flatten_seq.FlattenOnDemandVector = (function (v,hashcode,cnt,flat){\nthis.v = v;\nthis.hashcode = hashcode;\nthis.cnt = cnt;\nthis.flat = flat;\nthis.cljs$lang$protocol_mask$partition0$ = 167142175;\nthis.cljs$lang$protocol_mask$partition1$ = 2048;\n});\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = (function (){\nvar self__ = this;\nvar self = this;\nreturn cljs.core.pr_str_STAR_(self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (self,key){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$ILookup$_lookup$arity$2(null,key);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (self,key,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$ILookup$_lookup$arity$3(null,key,not_found);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = cljs.core.PROTOCOL_SENTINEL);\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.not(cljs.core.deref(self__.flat))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.flat,(function (_){\nreturn cljs.core.with_meta(instaparse.auto_flatten_seq.flat_vec(cljs.core.deref(self__.v)),cljs.core.meta(cljs.core.deref(self__.v)));\n}));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.v,(function (_){\nreturn null;\n}));\n} else {\n}\n\nreturn cljs.core.deref(self__.flat);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (self,f,init){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IKVReduce$_kv_reduce$arity$3(null,f,init);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (self,i){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IIndexed$_nth$arity$2(null,i);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (self,i,not_found){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IIndexed$_nth$arity$3(null,i,not_found);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IVector$_assoc_n$arity$3(null,i,val);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn cljs.core.meta(cljs.core.deref(self__.flat));\n} else {\nreturn cljs.core.meta(cljs.core.deref(self__.v));\n}\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.cnt;\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IStack$_peek$arity$1(null);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IStack$_pop$arity$1(null);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nif((self__.cnt > (0))){\nreturn cljs.core.rseq(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));\n} else {\nreturn null;\n}\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__.hashcode;\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (self,other){\nvar self__ = this;\nvar self__$1 = this;\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.hashcode,cljs.core.hash(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.cnt,cljs.core.count(other))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null),other)));\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,cljs.core.meta(self__$1));\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (self,i,val){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null),i,val);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (self,k){\nvar self__ = this;\nvar self__$1 = this;\nreturn self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IAssociative$_contains_key_QMARK_$arity$2(null,k);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (self){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.seq(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (self,metamap){\nvar self__ = this;\nvar self__$1 = this;\nif(cljs.core.truth_(cljs.core.deref(self__.flat))){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.v)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.flat),metamap))));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.deref(self__.v),metamap)),self__.hashcode,self__.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(self__.flat))));\n}\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (self,obj){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null),obj);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = (function() {\nvar G__10306 = null;\nvar G__10306__2 = (function (self__,arg){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null,arg);\n});\nvar G__10306__3 = (function (self__,arg,not_found){\nvar self__ = this;\nvar self____$1 = this;\nvar self = self____$1;\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null,arg,not_found);\n});\nG__10306 = function(self__,arg,not_found){\nswitch(arguments.length){\ncase 2:\nreturn G__10306__2.call(this,self__,arg);\ncase 3:\nreturn G__10306__3.call(this,self__,arg,not_found);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__10306.cljs$core$IFn$_invoke$arity$2 = G__10306__2;\nG__10306.cljs$core$IFn$_invoke$arity$3 = G__10306__3;\nreturn G__10306;\n})()\n);\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = (function (self__,args10140){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args10140)));\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (arg){\nvar self__ = this;\nvar self = this;\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null,arg);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (arg,not_found){\nvar self__ = this;\nvar self = this;\nreturn self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null,arg,not_found);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = (function (self,that){\nvar self__ = this;\nvar self__$1 = this;\nreturn cljs.core._compare(self__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null),that);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"v\",\"v\",1661996586,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"hashcode\",\"hashcode\",1350412446,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"cnt\",\"cnt\",1924510325,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),new cljs.core.Symbol(null,\"flat\",\"flat\",-2076841507,null)], null);\n}));\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true);\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = \"instaparse.auto-flatten-seq/FlattenOnDemandVector\");\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = (function (this__4369__auto__,writer__4370__auto__,opt__4371__auto__){\nreturn cljs.core._write(writer__4370__auto__,\"instaparse.auto-flatten-seq/FlattenOnDemandVector\");\n}));\n\n/**\n * Positional factory function for instaparse.auto-flatten-seq/FlattenOnDemandVector.\n */\ninstaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = (function instaparse$auto_flatten_seq$__GT_FlattenOnDemandVector(v,hashcode,cnt,flat){\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(v,hashcode,cnt,flat));\n});\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL);\n\n(instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (v,writer,opts){\nvar v__$1 = this;\nreturn cljs.core._pr_writer(v__$1.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null),writer,opts);\n}));\ninstaparse.auto_flatten_seq.convert_afs_to_vec = (function instaparse$auto_flatten_seq$convert_afs_to_vec(afs){\nif(cljs.core.truth_(afs.dirty)){\nif(cljs.core.truth_(afs.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(null))){\nreturn cljs.core.vec(cljs.core.seq(afs));\n} else {\nreturn (new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(afs.v),afs.hashcode,afs.cnt,cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null)));\n}\n} else {\nreturn afs.v;\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","instaparse/auto_flatten_seq.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.auto-flatten-seq","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^D",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","instaparse/auto_flatten_seq.cljc"],"~:compiled-at",1616605206494,"~:resource-name","instaparse/auto_flatten_seq.cljc","~:warnings",[],"~:source","(ns instaparse.auto-flatten-seq\r\n  #?(:clj (:import clojure.lang.PersistentVector))\r\n  #?(:clj (:require [clojure.core.protocols :refer [IKVReduce]])))\r\n\r\n(def ^:const threshold 32)\r\n\r\n(defprotocol ConjFlat\r\n  (conj-flat [self obj])\r\n  (cached? [self]))\r\n\r\n; Need a backwards compatible version of mix-collection-hash\r\n#?(:clj (defmacro compile-if [test then else]\r\n          (if (eval test)\r\n            then\r\n            else)))\r\n\r\n#?(:clj (defmacro mix-collection-hash-bc [x y]\r\n          ;; backwards-compatible\r\n          `(compile-if (resolve 'clojure.core/mix-collection-hash)\r\n                       (mix-collection-hash ~x ~y)\r\n                       ~x)))\r\n\r\n(declare EMPTY hash-cat afs? true-count)\r\n\r\n#?(:clj\r\n   (defmacro hash-conj [premix-hash-v item]\r\n     `(unchecked-add-int (unchecked-multiply-int 31 ~premix-hash-v) (hash ~item)))\r\n   :cljs\r\n   (defn ^number hash-conj\r\n     \"Returns the hash code, consistent with =, for an external ordered\r\n  collection implementing Iterable.\r\n  See http://clojure.org/data_structures#hash for full algorithms.\"\r\n     [unmixed-hash item]\r\n     (+ (imul 31 unmixed-hash) (hash item))))\r\n\r\n#?(:clj\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (unchecked-multiply-int z z))\r\n             (zero? n) (unchecked-multiply-int z y)\r\n             :else (recur n (unchecked-multiply-int z y) (unchecked-multiply-int z z)))))))\r\n   :cljs\r\n   (defn- expt [base pow]\r\n     (if (zero? pow)\r\n       1\r\n       (loop [n (int pow), y (int 1), z (int base)]\r\n         (let [t (even? n), n (quot n 2)]\r\n           (cond\r\n             t (recur n y (imul z z))\r\n             (zero? n) (imul z y)\r\n             :else (recur n (imul z y) (imul z z))))))))\r\n\r\n(defn delve [v index]\r\n  (loop [v (get-in v index)\r\n         index index]\r\n    (if (afs? v)\r\n      (recur (get v 0) (conj index 0))\r\n      index)))\r\n\r\n(defn advance [v index]\r\n  (cond\r\n    (= (count index) 1)\r\n    (when (< (peek index) (dec (true-count v)))\r\n      (delve v [(inc (peek index))]))\r\n    \r\n    (< (peek index) (dec (true-count (get-in v (pop index)))))\r\n    (delve v (conj (pop index) (inc (peek index))))\r\n    \r\n    :else\r\n    (recur v (pop index))))\r\n\r\n(defn flat-seq\r\n  ([v] (if (pos? (count v)) \r\n         (flat-seq v (delve v [0]))\r\n         nil))\r\n  ([v index]\r\n    (lazy-seq\r\n      (cons (get-in v index) \r\n            (when-let [next-index (advance v index)] \r\n              (flat-seq v next-index))))))  \r\n\r\n#?(:clj\r\n(deftype AutoFlattenSeq [^PersistentVector v ^int premix-hashcode ^int hashcode\r\n                         ^int cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^clojure.lang.ISeq cached-seq]\r\n  Object\r\n  (toString [self] (.toString (seq self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? AutoFlattenSeq other)\r\n         (== hashcode (.hashcode ^AutoFlattenSeq other))\r\n         (== cnt (.cnt ^AutoFlattenSeq other))\r\n         (= dirty (.dirty ^AutoFlattenSeq other))\r\n         (= v (.v ^AutoFlattenSeq other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (if-let [^java.util.Collection s (seq self)]\r\n      (.iterator s)\r\n      (let [^java.util.Collection e ()]\r\n        (.iterator e))))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (let [^java.util.Collection s (seq self)]\r\n      (.toArray s)))\r\n  clojure.lang.Sequential\r\n  clojure.lang.ISeq\r\n  (equiv [self other]\r\n    (and (== hashcode (hash other))\r\n         (== cnt (count other))\r\n         (or (== cnt 0)\r\n             (= (seq self) other))))\r\n  (empty [self] (with-meta EMPTY (meta self))) \r\n  (first [self] (first (seq self)))\r\n  (next [self] (next (seq self)))\r\n  (more [self] (rest (seq self)))\r\n  (cons [self obj]\r\n    (cons obj self))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           (or dirty (.dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else \r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash-bc phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.ILookup\r\n  (valAt [self key]    \r\n    (.valAt v key))\r\n  (valAt [self key not-found]\r\n    (.valAt v key not-found))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (meta v))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq))))\r\n:cljs\r\n(deftype AutoFlattenSeq [^PersistentVector v ^number premix-hashcode ^number hashcode ^number cnt ^boolean dirty\r\n                         ^:unsynchronized-mutable ^ISeq cached-seq]\r\n  Object\r\n  (toString [self] (pr-str* (seq self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  ISequential\r\n  ISeq\r\n  (-first [self] (first (seq self)))\r\n  (-rest [self] (rest (seq self)))\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (and ;(instance? AutoFlattenSeq other)\r\n         (= hashcode (hash other))\r\n         (= cnt (count other))\r\n         (or (= cnt 0)\r\n             (= (seq self) other))))\r\n  ICollection\r\n  (-conj [self o] (cons o self))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta EMPTY (meta self))) \r\n  INext\r\n  (-next [self] (next (seq self)))\r\n  ConjFlat\r\n  (conj-flat [self obj]\r\n    (cond\r\n      (nil? obj) self\r\n      (afs? obj)\r\n      (cond\r\n        (zero? cnt) obj\r\n        (<= (count obj) threshold)\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (into v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           (or dirty (.-dirty ^AutoFlattenSeq obj)) nil))\r\n        :else\r\n        (let [phc (hash-cat self obj)\r\n              new-cnt (+ cnt (count obj))]\r\n          (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt\r\n                           true nil)))\r\n      :else\r\n      (let [phc (hash-conj premix-hashcode obj)\r\n            new-cnt (inc cnt)]\r\n        (AutoFlattenSeq. (conj v obj) phc (mix-collection-hash phc new-cnt) new-cnt dirty nil))))\r\n  (cached? [self] cached-seq)\r\n  ICounted\r\n  (-count [self] cnt)\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup v key))\r\n  (-lookup [self key not-found]\r\n    (-lookup v key not-found))\r\n  IWithMeta\r\n  (-with-meta [self metamap]\r\n    (AutoFlattenSeq. (with-meta v metamap) premix-hashcode hashcode cnt dirty nil))\r\n  IMeta\r\n  (-meta [self]\r\n    (meta v))\r\n  ISeqable\r\n  (-seq [self]\r\n    (if cached-seq cached-seq\r\n      (do\r\n        (set! cached-seq (if dirty (flat-seq v) (seq v)))\r\n        cached-seq)))))\r\n\r\n#?(:clj\r\n   (defn- hash-cat ^long [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (unchecked-add-int\r\n        (unchecked-multiply-int e (.premix-hashcode v1))\r\n        (unchecked-subtract-int (.premix-hashcode v2) e))))\r\n   :cljs\r\n   (defn- hash-cat ^number [^AutoFlattenSeq v1 ^AutoFlattenSeq v2]\r\n     (let [c (count v2)\r\n           e (int (expt 31 c))]\r\n       (+ (imul e (.-premix-hashcode v1))\r\n          (- (.-premix-hashcode v2) e)))))\r\n\r\n#?(:clj\r\n   (defn hash-ordered-coll-without-mix ^long [v]\r\n     (compile-if (resolve 'clojure.core/mix-collection-hash)\r\n       (let [thirty-one (int 31)\r\n             cnt (count v)]\r\n         (loop [acc (int 1) i (int 0)]\r\n           (if (< i cnt)\r\n             (recur (unchecked-add-int\r\n                     (unchecked-multiply-int thirty-one acc)\r\n                     (hash (v i)))\r\n                    (inc i))\r\n             acc)))\r\n       (hash v)))\r\n   :cljs\r\n   (defn ^number hash-ordered-coll-without-mix\r\n     \"Returns the partially calculated hash code, still requires a call to mix-collection-hash\"\r\n     ([coll]\r\n      (hash-ordered-coll-without-mix 1 coll))\r\n     ([existing-unmixed-hash coll]\r\n      (loop [unmixed-hash existing-unmixed-hash\r\n             coll (seq coll)]\r\n        (if-not (nil? coll)\r\n          (recur (bit-or (+ (imul 31 unmixed-hash) (hash (first coll))) 0) \r\n                 (next coll))\r\n          unmixed-hash)))))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/AutoFlattenSeq\r\n     (-pr-writer [afs writer opts]\r\n       (-pr-writer (seq afs) writer opts))))\r\n\r\n(defn auto-flatten-seq [v]\r\n  (let [v (vec v)]\r\n    (AutoFlattenSeq. v\r\n                     (hash-ordered-coll-without-mix v)\r\n                     (hash v) (count v)\r\n                     false nil)))\r\n\r\n(def EMPTY (auto-flatten-seq []))\r\n\r\n(defn afs? [s]\r\n  (instance? AutoFlattenSeq s))\r\n\r\n(defn true-count [v]\r\n  (if (afs? v)\r\n    (count (.-v ^AutoFlattenSeq v))\r\n    (count v)))\r\n\r\n;; For hiccup format, we need to be able to convert the seq to a vector.\r\n\r\n(defn flat-vec-helper [acc v]\r\n  (if-let [s (seq v)]\r\n    (let [fst (first v)]\r\n      (if (afs? fst) \r\n        (recur (flat-vec-helper acc fst) (next v))\r\n        (recur (conj! acc fst) (next v))))\r\n    acc))\r\n\r\n(defn flat-vec\r\n  \"Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec\"\r\n  [v]\r\n  (persistent! (flat-vec-helper (transient []) v)))\r\n\r\n(defprotocol GetVec\r\n  (^PersistentVector get-vec [self]))\r\n\r\n#?(:clj\r\n(deftype FlattenOnDemandVector [v   ; ref containing PersistentVector or nil \r\n                                ^int hashcode\r\n                                ^int cnt\r\n                                flat] ; ref containing PersistentVector or nil                                \r\n  GetVec\r\n  (get-vec [self] \r\n           (when (not @flat)             \r\n             (dosync\r\n               (when (not @flat)\r\n                 (ref-set flat (with-meta (flat-vec @v) (meta @v))) \r\n                 (ref-set v nil)))) ; clear out v so it can be garbage collected\r\n           @flat)\r\n                    \r\n  Object\r\n  (toString [self] (.toString (get-vec self)))\r\n  (hashCode [self] hashcode)\r\n  (equals [self other]\r\n    (and (instance? FlattenOnDemandVector other)\r\n         (== hashcode (.hashcode ^FlattenOnDemandVector other))\r\n         (== cnt (.cnt ^FlattenOnDemandVector other))\r\n         (= v (.v ^FlattenOnDemandVector other))\r\n         (= flat (.flat ^FlattenOnDemandVector other))))\r\n  clojure.lang.IHashEq\r\n  (hasheq [self] hashcode)\r\n  java.util.Collection\r\n  (iterator [self]\r\n    (.iterator (get-vec self)))\r\n  (size [self]\r\n    cnt)\r\n  (toArray [self]\r\n    (.toArray (get-vec self)))\r\n  clojure.lang.IPersistentCollection\r\n  (equiv [self other]\r\n    (or \r\n      (and (== hashcode (hash other))\r\n           (== cnt (count other))\r\n           (= (get-vec self) other))))\r\n  (empty [self] (with-meta [] (meta self))) \r\n  clojure.lang.Counted\r\n  (count [self] cnt)\r\n  clojure.lang.IPersistentVector\r\n  (assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (assocN [self i val]\r\n    (.assocN (get-vec self) i val))\r\n  (length [self]\r\n    cnt)\r\n  (cons [self obj]\r\n    (conj (get-vec self) obj))\r\n  clojure.lang.IObj\r\n  (withMeta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (ref @v) hashcode cnt (ref (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (ref (with-meta @v metamap)) hashcode cnt (ref @flat))))\r\n  clojure.lang.IMeta\r\n  (meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  clojure.lang.Seqable\r\n  (seq [self]\r\n    (seq (get-vec self)))\r\n  clojure.lang.ILookup\r\n  (valAt [self key]\r\n    (.valAt (get-vec self) key))\r\n  (valAt [self key not-found]\r\n    (.valAt (get-vec self) key not-found))\r\n  clojure.lang.Indexed\r\n  (nth [self i]\r\n    (.nth (get-vec self) i))\r\n  (nth [self i not-found]\r\n    (.nth (get-vec self) i not-found))\r\n  clojure.lang.IFn\r\n  (invoke [self arg]\r\n    (.invoke (get-vec self) arg))\r\n  (applyTo [self arglist]\r\n    (.applyTo (get-vec self) arglist))\r\n  clojure.lang.Reversible\r\n  (rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  clojure.lang.IPersistentStack\r\n  (peek [self] \r\n    (peek (get-vec self)))\r\n  (pop [self] \r\n    (pop (get-vec self)))\r\n  clojure.lang.Associative\r\n  (containsKey [self k]\r\n    (.containsKey (get-vec self) k))\r\n  (entryAt [self k]\r\n    (.entryAt (get-vec self) k))\r\n  IKVReduce\r\n  (kv-reduce [self f init]\r\n    (.kvreduce (get-vec self) f init))\r\n  java.lang.Comparable\r\n  (compareTo [self that]\r\n    (.compareTo (get-vec self) that))\r\n  java.util.List\r\n  (get [self i] (nth (get-vec self) i))\r\n  (indexOf [self o] (.indexOf (get-vec self) o))\r\n  (lastIndexOf [self o] (.lastIndexOf (get-vec self) o))\r\n  (listIterator [self]\r\n    (.listIterator (get-vec self) 0))\r\n  (listIterator [self i]\r\n    (.listIterator (get-vec self) i))\r\n  (subList [self a z]\r\n    (.subList (get-vec self) a z))\r\n  )\r\n:cljs\r\n(deftype FlattenOnDemandVector [v   ; atom containing PersistentVector or nil \r\n                                ^number hashcode\r\n                                ^number cnt\r\n                                flat] ; atom containing PersistentVector or nil\r\n  GetVec\r\n  (get-vec [self] \r\n    (when (not @flat)             \r\n      (swap! flat (fn [_] (with-meta (flat-vec @v) (meta @v))))\r\n      (swap! v (fn [_] nil))) ; clear out v so it can be garbage collected \r\n    @flat)\r\n  \r\n  Object\r\n  (toString [self]\r\n    (pr-str* (get-vec self)))\r\n  IHash\r\n  (-hash [self] hashcode)\r\n  IEquiv\r\n  (-equiv [self other]\r\n    (or \r\n     (and (= hashcode (hash other))\r\n          (= cnt (count other))\r\n          (= (get-vec self) other))))\r\n  IEmptyableCollection\r\n  (-empty [self] (with-meta [] (meta self))) \r\n  ICounted\r\n  (-count [self] cnt)\r\n  IVector\r\n  (-assoc-n [self i val]\r\n    (-assoc-n (get-vec self) i val))\r\n  ICollection\r\n  (-conj [self obj]\r\n    (conj (get-vec self) obj))\r\n  IWithMeta\r\n  (-with-meta [self metamap]    \r\n    (if @flat\r\n      (FlattenOnDemandVector. (atom @v) hashcode cnt (atom (with-meta @flat metamap)))\r\n      (FlattenOnDemandVector. (atom (with-meta @v metamap)) hashcode cnt (atom @flat))))\r\n  IMeta\r\n  (-meta [self]\r\n    (if @flat (meta @flat) (meta @v)))\r\n  ISequential\r\n  ISeqable\r\n  (-seq [self]\r\n    (seq (get-vec self)))\r\n  ILookup\r\n  (-lookup [self key]\r\n    (-lookup (get-vec self) key))\r\n  (-lookup [self key not-found]\r\n    (-lookup (get-vec self) key not-found))\r\n  IIndexed\r\n  (-nth [self i]\r\n    (-nth (get-vec self) i))\r\n  (-nth [self i not-found]\r\n    (-nth (get-vec self) i not-found))\r\n  IFn\r\n  (-invoke [self arg]\r\n    (-invoke (get-vec self) arg))\r\n  (-invoke [self arg not-found]\r\n    (-invoke (get-vec self) arg not-found))\r\n  IReversible\r\n  (-rseq [self]\r\n    (if (pos? cnt)\r\n      (rseq (get-vec self))\r\n      nil))\r\n  IStack\r\n  (-peek [self] \r\n    (-peek (get-vec self)))\r\n  (-pop [self] \r\n    (-pop (get-vec self)))\r\n  IAssociative\r\n  (-assoc [self i val]\r\n    (assoc (get-vec self) i val))\r\n  (-contains-key? [self k]\r\n    (-contains-key? (get-vec self) k))\r\n  IKVReduce\r\n  (-kv-reduce [self f init]\r\n    (-kv-reduce (get-vec self) f init))\r\n  IComparable\r\n  (-compare [self that]\r\n    (-compare (get-vec self) that))\r\n  ))\r\n\r\n#?(:cljs\r\n   (extend-protocol IPrintWithWriter\r\n     instaparse.auto-flatten-seq/FlattenOnDemandVector\r\n     (-pr-writer [v writer opts]\r\n       (-pr-writer (get-vec v) writer opts))))\r\n\r\n(defn convert-afs-to-vec [^AutoFlattenSeq afs]\r\n  (cond\r\n    (.-dirty afs)\r\n    (if (cached? afs)\r\n      (vec (seq afs))\r\n      #?(:clj\r\n         (FlattenOnDemandVector.\r\n          (ref (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (ref nil))\r\n         :cljs\r\n         (FlattenOnDemandVector.\r\n          (atom (.-v afs))\r\n          (.-hashcode afs)\r\n          (.-cnt afs)\r\n          (atom nil))))\r\n    :else\r\n    (.-v afs)))\r\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["instaparse.auto-flatten-seq/threshold","instaparse$auto-flatten-seq$ConjFlat$conj_flat$dyn","x__4428__auto__","m__4429__auto__","instaparse.auto-flatten-seq/conj-flat","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","instaparse$auto-flatten-seq$ConjFlat$cached_QMARK_$dyn","instaparse.auto-flatten-seq/cached?","instaparse.auto-flatten-seq/ConjFlat","self","obj","instaparse.auto-flatten-seq/hash-conj","unmixed-hash","item","cljs.core/imul","cljs.core/hash","instaparse.auto-flatten-seq/expt","base","pow","n","y","z","t","cljs.core/even?","cljs.core/quot","instaparse.auto-flatten-seq/delve","v","index","cljs.core.get_in","instaparse.auto-flatten-seq/afs?","cljs.core.get","cljs.core.conj","instaparse.auto-flatten-seq/advance","cljs.core._EQ_","cljs.core/count","cljs.core/peek","instaparse.auto-flatten-seq/true-count","G__10105","cljs.core/pop","var_args","G__10110","instaparse.auto-flatten-seq/flat-seq","js/Error","instaparse.auto_flatten_seq.flat_seq","cljs.core/LazySeq","cljs.core/cons","temp__5735__auto__","next-index","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","instaparse.auto-flatten-seq/AutoFlattenSeq","instaparse.auto-flatten-seq/->AutoFlattenSeq","premix-hashcode","hashcode","cnt","dirty","cached-seq","cljs.core/pr-str*","cljs.core/seq","cljs.core/first","cljs.core/rest","other","o","cljs.core/with-meta","instaparse.auto-flatten-seq/EMPTY","cljs.core/meta","cljs.core/next","phc","instaparse.auto-flatten-seq/hash-cat","new-cnt","cljs.core.into","cljs.core/mix-collection-hash","or__4126__auto__","key","not-found","metamap","v1","v2","c","e","G__10132","instaparse.auto-flatten-seq/hash-ordered-coll-without-mix","coll","instaparse.auto_flatten_seq.hash_ordered_coll_without_mix","existing-unmixed-hash","afs","writer","opts","cljs.core/-pr-writer","instaparse.auto-flatten-seq/auto-flatten-seq","cljs.core/vec","s","instaparse.auto-flatten-seq/flat-vec-helper","acc","temp__5733__auto__","fst","cljs.core.conj_BANG_","instaparse.auto-flatten-seq/flat-vec","cljs.core/persistent!","cljs.core/transient","instaparse$auto-flatten-seq$GetVec$get_vec$dyn","instaparse.auto-flatten-seq/get-vec","instaparse.auto-flatten-seq/GetVec","cljs.core/deref","self__","args10140","cljs.core/aclone","instaparse.auto-flatten-seq/FlattenOnDemandVector","instaparse.auto-flatten-seq/->FlattenOnDemandVector","flat","cljs.core/not","cljs.core.swap_BANG_","_","i","val","cljs.core.atom","arg","cljs.core/rseq","cljs.core.assoc","k","f","init","that","cljs.core/-compare","instaparse.auto-flatten-seq/convert-afs-to-vec"]],"~:used-vars",["^D",["~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$instaparse.auto-flatten-seq/flat-vec-helper","~$instaparse.auto-flatten-seq/auto-flatten-seq","~$instaparse.auto-flatten-seq/afs?","~$instaparse.auto-flatten-seq/convert-afs-to-vec","~$instaparse.auto-flatten-seq/->FlattenOnDemandVector","~$instaparse.auto-flatten-seq/threshold","~$cljs.core/=","~$instaparse.auto-flatten-seq/true-count","~$instaparse.auto-flatten-seq/hash-cat","~$cljs.core/-write","~$cljs.core/hash","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$instaparse.auto-flatten-seq/hash-conj","~$cljs.core/aclone","~$cljs.core/LazySeq","~$cljs.core/atom","~$instaparse.auto-flatten-seq/conj-flat","~$cljs.core/pop","~$cljs.core/pr-str*","~$instaparse.auto-flatten-seq/get-vec","~$instaparse.auto-flatten-seq/->AutoFlattenSeq","~$cljs.core/-kv-reduce","~$cljs.core/into","~$instaparse.auto-flatten-seq/cached?","~$cljs.core/conj","~$instaparse.auto-flatten-seq/EMPTY","~$cljs.core/-compare","~$cljs.core/with-meta","~$cljs.core/peek","~$cljs.core/-assoc-n","~$instaparse.auto-flatten-seq/GetVec","~$cljs.core/get-in","~$instaparse.auto-flatten-seq/AutoFlattenSeq","~$cljs.core/swap!","~$instaparse.auto-flatten-seq/delve","~$cljs.core/get","~$instaparse.auto-flatten-seq/ConjFlat","~$cljs.core/-nth","~$instaparse.auto-flatten-seq/FlattenOnDemandVector","~$cljs.core/imul","~$cljs.core/-pr-writer","~$cljs.core/-pop","~$cljs.core/conj!","~$cljs.core/rseq","~$cljs.core/persistent!","~$cljs.core/-lookup","~$instaparse.auto-flatten-seq/flat-seq","~$cljs.core/meta","~$cljs.core/next","~$cljs.core/vec","~$cljs.core/transient","~$cljs.core/not","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/-invoke","~$instaparse.auto-flatten-seq/advance","~$instaparse.auto-flatten-seq/expt","~$cljs.core/-contains-key?","~$cljs.core/first","~$cljs.core/-peek","~$cljs.core/mix-collection-hash","~$js/Error","~$instaparse.auto-flatten-seq/flat-vec","~$instaparse.auto-flatten-seq/hash-ordered-coll-without-mix"]]],"~:cache-keys",["~#cmap",[["^W","instaparse/auto_flatten_seq.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^L","^K"]]],["^W","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.dom.HtmlElement"]]],["^W","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.array","~$goog.asserts"]]],["^W","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^W","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2Z"]]],["^W","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W"]]],["^W","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W"]]],"~:SHADOW-TIMESTAMP",[1610389887000,1610389887000,1609369123000],["^W","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","~$goog.reflect"]]],["^W","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","~$goog.html.trustedtypes","^31","^32","^33","^34"]]],["^W","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","~$goog.html.SafeUrl","^33","^34","^2Z"]]],["^W","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^38","^30","~$goog.html.uncheckedconversions","^33","^2Z"]]],["^W","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^W","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","~$goog.dom.TagName","~$goog.dom.tags","^3<","^3=","~$goog.html.SafeStyleSheet","^38","^30","^37","^31","^32","~$goog.labs.userAgent.browser","^2Y","^33","^34","^2Z"]]],["^W","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2Y"]]],["^W","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^W","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^W","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",[]]],["^W","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2Y"]]],["^W","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.dom.safe","^3>","^33","^2Z"]]],["^W","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2Z"]]],["^W","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","^3:","~$goog.math"]]],["^W","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","^3;","^3<","^3=","^3C","^38","^30","^33","^2Z"]]],["^W","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L"]]],["^W","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","~$goog.math.Long","~$goog.math.Integer","^3G","^2Y","^2V","~$goog.Uri","~$goog.string.StringBuffer"]]],["^W","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","^37","^33","^34"]]],["^W","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","^3=","^2Y","^33","^34","^2Z"]]],["^W","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^36"]]],["^W","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2V","^2W","^3G"]]],["^W","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^D",[]],"^2T",["^L","^2W","^34"]]]]],"~:clj-info",["^ ","jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1609185187000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["instaparse$auto-flatten-seq$GetVec$","instaparse$auto-flatten-seq$ConjFlat$"]],"^B",null,"^C",["^D",["~$EMPTY"]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^D",[]],"~:shadow/js-access-global",["^D",["Error"]],"^N",null,"~:defs",["^ ","~$FlattenOnDemandVector",["^ ","~:num-fields",4,"~:protocols",["^D",["~$cljs.core/IIndexed","~$cljs.core/IVector","~$cljs.core/IReversible","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/IEmptyableCollection","~$cljs.core/ICounted","^1Y","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/IStack","~$cljs.core/IComparable","~$cljs.core/ISequential","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/ILookup"]],"^E","^25","^6","instaparse/auto_flatten_seq.cljc","^:",31,"~:type",true,"^8",10,"^7",422,"~:record",false,"^9",422,"~:tag","~$function","~:skip-protocol-flag",["^D",["^4H","^4I","^4J","^4K","^4L","^4M","^4N","^4O","^4Q","^4R","^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z"]]],"~$AutoFlattenSeq",["^ ","^4F",6,"^4G",["^D",["^4L","^4M","^4O","^4P","^4Q","^4R","~$cljs.core/ISeq","~$cljs.core/INext","^23","^4S","^4T","^4W","^4X","^4Z"]],"^E","^1[","^6","instaparse/auto_flatten_seq.cljc","^:",24,"^4[",true,"^8",10,"^7",167,"^50",false,"^9",167,"^51","^52","^53",["^D",["^4L","^4M","^4O","^4Q","^4R","^55","^56","^4S","^4T","^4W","^4X","^4Z"]]],"~$GetVec",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","instaparse/auto_flatten_seq.cljc","^:",20,"^8",14,"^7",310,"~:protocol-info",["^ ","~:methods",["^ ","~$get-vec",[["~$self"]]]],"^9",310,"~:sigs",["^ ","~:get-vec",["^ ","^E","^5;","~:arglists",["^Q",[["^5<"]]],"~:doc",null]],"~:jsdoc",["^Q",["@interface"]]],"^58",true,"^E","^1Y","^6","instaparse/auto_flatten_seq.cljc","^:",20,"^8",1,"^7",310,"^59",["^ ","^5:",["^ ","^5;",[["^5<"]]]],"~:info",null,"^9",310,"^51","~$any","^5=",["^ ","^5>",["^ ","^E","^5;","^5?",["^Q",[["^5<"]]],"^5@",null]],"~:impls",["^D",["^25"]],"^5A",["^Q",["@interface"]]],"~$delve",["^ ","~:protocol-inline",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",57,"^8",7,"^9",57,"^:",12,"^5?",["^Q",["~$quote",["^Q",[["~$v","~$index"]]]]]],"^E","^21","^6","instaparse/auto_flatten_seq.cljc","^:",12,"~:method-params",["^Q",[["~$v","^5H"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"~:variadic?",false,"^7",57,"~:ret-tag","^5C","^9",57,"~:max-fixed-arity",2,"~:fn-var",true,"^5?",["^Q",["^5G",["^Q",[["~$v","^5H"]]]]]],"~$flat-seq",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",76,"^8",7,"^9",76,"^:",15,"^5?",["^Q",["^5G",["^Q",[["~$v"],["~$v","^5H"]]]]],"~:top-fn",["^ ","^5L",false,"~:fixed-arity",2,"^5N",2,"^5I",[["~$v"],["~$v","^5H"]],"^5?",["^Q",[["~$v"],["~$v","^5H"]]],"^5K",["^Q",[null,null]]]],"^E","^2=","^6","instaparse/auto_flatten_seq.cljc","^:",15,"^5Q",["^ ","^5L",false,"^5R",2,"^5N",2,"^5I",[["~$v"],["~$v","^5H"]],"^5?",["^Q",[["~$v"],["~$v","^5H"]]],"^5K",["^Q",[null,null]]],"^5I",[["~$v"],["~$v","^5H"]],"^5J",null,"^5R",2,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^5:",[["^ ","^5R",1,"^5L",false,"^51",["^D",["^5C","~$clj-nil"]]],["^ ","^5R",2,"^5L",false,"^51","^1I"]],"^7",76,"^9",76,"^5N",2,"^5O",true,"^5?",["^Q",[["~$v"],["~$v","^5H"]]]],"~$advance",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",64,"^8",7,"^9",64,"^:",14,"^5?",["^Q",["^5G",["^Q",[["~$v","^5H"]]]]]],"^E","^2F","^6","instaparse/auto_flatten_seq.cljc","^:",14,"^5I",["^Q",[["~$v","^5H"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",64,"^5M",["^D",["^5C","^5S"]],"^9",64,"^5N",2,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v","^5H"]]]]]],"~$expt",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",47,"^8",11,"^9",47,"^:",15,"~:private",true,"^5?",["^Q",["^5G",["^Q",[["~$base","~$pow"]]]]]],"^5V",true,"^E","^2G","^6","instaparse/auto_flatten_seq.cljc","^:",15,"^5I",["^Q",[["^5W","^5X"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",4,"^5L",false,"^7",47,"^5M","~$number","^9",47,"^5N",2,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^5W","^5X"]]]]]],"~$flat-vec",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",305,"^8",7,"^9",305,"^:",15,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]],"^5@","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"^E","^2M","^6","instaparse/auto_flatten_seq.cljc","^:",15,"^5I",["^Q",[["~$v"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",305,"^5M","~$clj","^9",305,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]],"^5@","Turns deep vector (like the vector inside of FlattenOnDemandVector) into a flat vec"],"~$flat-vec-helper",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",297,"^8",7,"^9",297,"^:",22,"^5?",["^Q",["^5G",["^Q",[["~$acc","~$v"]]]]]],"^E","^19","^6","instaparse/auto_flatten_seq.cljc","^:",22,"^5I",["^Q",[["^61","~$v"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",297,"^9",297,"^5N",2,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^61","~$v"]]]]]],"~$hash-conj",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",29,"^8",18,"^9",29,"^:",27,"^51","^5Y","^5?",["^Q",["^5G",["^Q",[["~$unmixed-hash","~$item"]]]]],"^5@","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"^E","^1G","^6","instaparse/auto_flatten_seq.cljc","^:",27,"^5I",["^Q",[["^63","^64"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",4,"^5L",false,"^7",29,"^5M","^5Y","^9",29,"^5N",2,"^51","^5Y","^5O",true,"^5?",["^Q",["^5G",["^Q",[["^63","^64"]]]]],"^5@","Returns the hash code, consistent with =, for an external ordered\n  collection implementing Iterable.\n  See http://clojure.org/data_structures#hash for full algorithms."],"~$hash-ordered-coll-without-mix",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^:",47,"^5Q",["^ ","^5L",false,"^5R",2,"^5N",2,"^5I",[["~$coll"],["~$existing-unmixed-hash","^66"]],"^5?",["^Q",[["^66"],["^67","^66"]]],"^5K",["^Q",[null,null]]],"^8",18,"^7",260,"^9",260,"^51","^5Y","^5?",["^Q",["^5G",["^Q",[["^66"],["^67","^66"]]]]],"^5@","Returns the partially calculated hash code, still requires a call to mix-collection-hash"],"^E","^2N","^6","instaparse/auto_flatten_seq.cljc","^:",47,"^5Q",["^ ","^5L",false,"^5R",2,"^5N",2,"^5I",[["^66"],["^67","^66"]],"^5?",["^Q",[["^66"],["^67","^66"]]],"^5K",["^Q",[null,null]]],"^5I",[["^66"],["^67","^66"]],"^5J",null,"^5R",2,"^5K",["^Q",[null,null]],"^8",4,"^5L",false,"^5:",[["^ ","^5R",1,"^5L",false,"^51","^5Y"],["^ ","^5R",2,"^5L",false]],"^7",260,"^5M","^5Y","^9",260,"^5N",2,"^51","^5Y","^5O",true,"^5?",["^Q",[["^66"],["^67","^66"]]],"^5@","Returns the partially calculated hash code, still requires a call to mix-collection-hash"],"~$true-count",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",290,"^8",7,"^9",290,"^:",17,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]]],"^E","^1@","^6","instaparse/auto_flatten_seq.cljc","^:",17,"^5I",["^Q",[["~$v"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",290,"^5M","^5Y","^9",290,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]]],"~$convert-afs-to-vec",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",510,"^8",7,"^9",510,"^:",25,"^5?",["^Q",["^5G",["^Q",[["~$afs"]]]]]],"^E","^1<","^6","instaparse/auto_flatten_seq.cljc","^:",25,"^5I",["^Q",[["^6:"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",510,"^5M",["^D",["^5[","^4I","^5C","^25","~$cljs.core/MetaFn","^5S"]],"^9",510,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^6:"]]]]]],"~$hash-cat",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",240,"^8",11,"^9",240,"^:",19,"^5V",true,"^5?",["^Q",["^5G",["^Q",[["~$v1","~$v2"]]]]]],"^5V",true,"^E","^1A","^6","instaparse/auto_flatten_seq.cljc","^:",19,"^5I",["^Q",[["^6=","^6>"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",4,"^5L",false,"^7",240,"^5M","^5Y","^9",240,"^5N",2,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^6=","^6>"]]]]]],"~$auto-flatten-seq",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",278,"^8",7,"^9",278,"^:",23,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]]],"^E","^1:","^6","instaparse/auto_flatten_seq.cljc","^:",23,"^5I",["^Q",[["~$v"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",278,"^5M","^1[","^9",278,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v"]]]]]],"~$afs?",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",287,"^8",7,"^9",287,"^:",11,"^5?",["^Q",["^5G",["^Q",[["~$s"]]]]]],"^E","^1;","^6","instaparse/auto_flatten_seq.cljc","^:",11,"^5I",["^Q",[["~$s"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",287,"^5M","~$boolean","^9",287,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$s"]]]]]],"~$threshold",["^ ","^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",5,"^8",14,"^9",5,"^:",23,"~:const",true],"^E","^1>","^6","instaparse/auto_flatten_seq.cljc","^:",23,"~:const-expr",["^ ","^G","^6C","~:val",32,"~:env",["^ ","~:context","~:expr"],"^P",32,"^51","^5Y"],"^8",1,"^6C",true,"^7",5,"^9",5,"^51","^5Y"],"~$->FlattenOnDemandVector",["^ ","^5F",null,"^5",["^ ","^4G",["^D",["^4H","^4I","^4J","^4K","^4L","^4M","^4N","^4O","^4P","^4Q","^4R","^1Y","^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z"]],"^6","instaparse/auto_flatten_seq.cljc","^:",31,"^8",10,"~:factory","~:positional","^7",422,"^9",422,"^5?",["^Q",["^5G",["^Q",[["~$v","~$hashcode","~$cnt","~$flat"]]]]],"^53",["^D",["^4H","^4I","^4J","^4K","^4L","^4M","^4N","^4O","^4Q","^4R","^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z"]],"^5@","Positional factory function for instaparse.auto-flatten-seq/FlattenOnDemandVector."],"^4G",["^D",["^4H","^4I","^4J","^4K","^4L","^4M","^4N","^4O","^4P","^4Q","^4R","^1Y","^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z"]],"^E","^1=","^6","instaparse/auto_flatten_seq.cljc","^:",31,"^5I",["^Q",[["~$v","^6L","^6M","^6N"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^6J","^6K","^7",422,"^5M","^25","^9",422,"^5N",4,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v","^6L","^6M","^6N"]]]]],"^53",["^D",["^4H","^4I","^4J","^4K","^4L","^4M","^4N","^4O","^4Q","^4R","^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z"]],"^5@","Positional factory function for instaparse.auto-flatten-seq/FlattenOnDemandVector."],"~$conj-flat",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",8,"^8",4,"^9",8,"^:",13,"~:protocol","^23","^5@",null,"^5?",["^Q",["^5G",["^Q",[["^5<","~$obj"]]]]]],"^6P","^23","^E","^1K","^6","instaparse/auto_flatten_seq.cljc","^:",13,"^5I",["^Q",[["^5<","^6Q"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",7,"^5M","^5C","^9",8,"^5N",2,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^5<","^6Q"]]]]],"^5@",null],"^5;",["^ ","^5F",null,"^5",["^ ","^6P","^1Y","^6","instaparse/auto_flatten_seq.cljc","^:",29,"^8",22,"^7",311,"^9",311,"^51","~$PersistentVector","^5?",["^Q",["^5G",["^Q",[["^5<"]]]]],"^5@",null],"^6P","^1Y","^E","^1N","^6","instaparse/auto_flatten_seq.cljc","^:",29,"^5I",["^Q",[["^5<"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",310,"^5M","^6R","^9",311,"^5N",1,"^51","^6R","^5O",true,"^5?",["^Q",["^5G",["^Q",[["^5<"]]]]],"^5@",null],"~$->AutoFlattenSeq",["^ ","^5F",null,"^5",["^ ","^4G",["^D",["^4L","^4M","^4O","^4P","^4Q","^4R","^55","^56","^23","^4S","^4T","^4W","^4X","^4Z"]],"^6","instaparse/auto_flatten_seq.cljc","^:",24,"^8",10,"^6J","^6K","^7",167,"^9",167,"^5?",["^Q",["^5G",["^Q",[["~$v","~$premix-hashcode","^6L","^6M","~$dirty","~$cached-seq"]]]]],"^53",["^D",["^4L","^4M","^4O","^4Q","^4R","^55","^56","^4S","^4T","^4W","^4X","^4Z"]],"^5@","Positional factory function for instaparse.auto-flatten-seq/AutoFlattenSeq."],"^4G",["^D",["^4L","^4M","^4O","^4P","^4Q","^4R","^55","^56","^23","^4S","^4T","^4W","^4X","^4Z"]],"^E","^1O","^6","instaparse/auto_flatten_seq.cljc","^:",24,"^5I",["^Q",[["~$v","^6T","^6L","^6M","^6U","^6V"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^6J","^6K","^7",167,"^5M","^1[","^9",167,"^5N",6,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["~$v","^6T","^6L","^6M","^6U","^6V"]]]]],"^53",["^D",["^4L","^4M","^4O","^4Q","^4R","^55","^56","^4S","^4T","^4W","^4X","^4Z"]],"^5@","Positional factory function for instaparse.auto-flatten-seq/AutoFlattenSeq."],"^4B",["^ ","^E","^1T","^6","instaparse/auto_flatten_seq.cljc","^7",285,"^8",1,"^9",285,"^:",11,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",285,"^8",6,"^9",285,"^:",11],"^51","^1["],"~$ConjFlat",["^ ","^5",["^ ","^58",true,"^6","instaparse/auto_flatten_seq.cljc","^:",22,"^8",14,"^7",7,"^59",["^ ","^5:",["^ ","^6O",[["^5<","^6Q"]],"~$cached?",[["^5<"]]]],"^9",7,"^5=",["^ ","~:conj-flat",["^ ","^E","^6O","^5?",["^Q",[["^5<","^6Q"]]],"^5@",null],"~:cached?",["^ ","^E","^6X","^5?",["^Q",[["^5<"]]],"^5@",null]],"^5A",["^Q",["@interface"]]],"^58",true,"^E","^23","^6","instaparse/auto_flatten_seq.cljc","^:",22,"^8",1,"^7",7,"^59",["^ ","^5:",["^ ","^6O",[["^5<","^6Q"]],"^6X",[["^5<"]]]],"^5B",null,"^9",7,"^51","^5C","^5=",["^ ","^6Y",["^ ","^E","^6O","^5?",["^Q",[["^5<","^6Q"]]],"^5@",null],"^6Z",["^ ","^E","^6X","^5?",["^Q",[["^5<"]]],"^5@",null]],"^5D",["^D",["^1["]],"^5A",["^Q",["@interface"]]],"^6X",["^ ","^5F",null,"^5",["^ ","^6","instaparse/auto_flatten_seq.cljc","^7",9,"^8",4,"^9",9,"^:",11,"^6P","^23","^5@",null,"^5?",["^Q",["^5G",["^Q",[["^5<"]]]]]],"^6P","^23","^E","^1R","^6","instaparse/auto_flatten_seq.cljc","^:",11,"^5I",["^Q",[["^5<"]]],"^5J",null,"^5K",["^Q",[null,null]],"^8",1,"^5L",false,"^7",7,"^5M","^5C","^9",9,"^5N",1,"^5O",true,"^5?",["^Q",["^5G",["^Q",[["^5<"]]]]],"^5@",null]],"^O",["^ ","^K","^K"],"~:cljs.analyzer/constants",["^ ","^M",["^D",["^6A","^6T","~:else","^6U","~$v","^5Y","^6V","~:unsynchronized-mutable","^6R","~$ISeq","^6M","^51","^6N","^6L"]],"~:order",["^70","~$v","^51","^6R","^6T","^5Y","^6L","^6M","^6U","^6A","^6V","^71","^72","^6N"]],"^S",["^ "],"^T",["^ "],"^U",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2P",[["^76","~:static-fns"],true,["^76","~:shadow-tweaks"],null,["^76","~:source-map-inline"],null,["^76","~:elide-asserts"],true,["^76","~:optimize-constants"],null,["^76","^Z"],null,["^76","~:external-config"],null,["^76","~:tooling-config"],null,["^76","~:emit-constants"],null,["^76","~:load-tests"],false,["^76","~:form-size-threshold"],null,["^76","~:data-readers"],null,["^76","~:infer-externs"],"~:auto",["^76","^10"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^76","~:fn-invoke-direct"],null,["^76","~:source-map"],null]]]