["^ ","~:output",["^ ","~:js","goog.provide('instaparse.print');\ninstaparse.print.paren_for_tags = (function instaparse$print$paren_for_tags(tag_set,hidden_QMARK_,parser){\nif(cljs.core.truth_(((cljs.core.not(hidden_QMARK_))?(function (){var G__28562 = (parser.cljs$core$IFn$_invoke$arity$1 ? parser.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223)) : parser.call(null,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223)));\nreturn (tag_set.cljs$core$IFn$_invoke$arity$1 ? tag_set.cljs$core$IFn$_invoke$arity$1(G__28562) : tag_set.call(null,G__28562));\n})():false))){\nreturn [\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(parser,false) : instaparse.print.combinators__GT_str.call(null,parser,false))),\")\"].join('');\n} else {\nreturn (instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(parser,false) : instaparse.print.combinators__GT_str.call(null,parser,false));\n}\n});\ninstaparse.print.paren_for_compound = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),null,new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null,new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null));\n/**\n * Replaces whitespace characters with escape sequences for better printing\n */\ninstaparse.print.regexp_replace = (function instaparse$print$regexp_replace(s){\nvar G__28563 = s;\nswitch (G__28563) {\ncase \"\\n\":\nreturn \"\\\\n\";\n\nbreak;\ncase \"\\b\":\nreturn \"\\\\b\";\n\nbreak;\ncase \"\\f\":\nreturn \"\\\\f\";\n\nbreak;\ncase \"\\r\":\nreturn \"\\\\r\";\n\nbreak;\ncase \"\\t\":\nreturn \"\\\\t\";\n\nbreak;\ndefault:\nreturn s;\n\n}\n});\ninstaparse.print.regexp__GT_str = (function instaparse$print$regexp__GT_str(r){\nreturn clojure.string.replace([\"#\\\"\",cljs.core.subs.cljs$core$IFn$_invoke$arity$2(r.source,(1)),\"\\\"\"].join(''),/[\\s]/,instaparse.print.regexp_replace);\n});\ninstaparse.print.number__GT_hex_padded = (function instaparse$print$number__GT_hex_padded(n){\nif((n <= (4095))){\nreturn [\"0000\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(n.toString((16)))].join('').substr((-4));\n} else {\nreturn n.toString((16));\n}\n});\n\ninstaparse.print.char_range__GT_str = (function instaparse$print$char_range__GT_str(p__28566){\nvar map__28567 = p__28566;\nvar map__28567__$1 = (((((!((map__28567 == null))))?(((((map__28567.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28567.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28567):map__28567);\nvar lo = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28567__$1,new cljs.core.Keyword(null,\"lo\",\"lo\",-931799889));\nvar hi = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28567__$1,new cljs.core.Keyword(null,\"hi\",\"hi\",-1821422114));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lo,hi)){\nreturn [\"%x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(lo))].join('');\n} else {\nreturn [\"%x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(lo)),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(hi))].join('');\n}\n});\n/**\n * Stringifies a parser built from combinators\n */\ninstaparse.print.combinators__GT_str = (function instaparse$print$combinators__GT_str(var_args){\nvar G__28579 = arguments.length;\nswitch (G__28579) {\ncase 1:\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = (function (p){\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(p,false);\n}));\n\n(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = (function (p__28580,hidden_QMARK_){\nvar map__28581 = p__28580;\nvar map__28581__$1 = (((((!((map__28581 == null))))?(((((map__28581.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28581.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28581):map__28581);\nvar p = map__28581__$1;\nvar parser = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28581__$1,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310));\nvar parser1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28581__$1,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422));\nvar parser2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28581__$1,new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688));\nvar parsers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28581__$1,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827));\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28581__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\nif(cljs.core.truth_(((cljs.core.not(hidden_QMARK_))?new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(p):false))){\nreturn [\"<\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(p,true)),\">\"].join('');\n} else {\nvar G__28583 = tag;\nvar G__28583__$1 = (((G__28583 instanceof cljs.core.Keyword))?G__28583.fqn:null);\nswitch (G__28583__$1) {\ncase \"epsilon\":\nreturn \"\\u03B5\";\n\nbreak;\ncase \"opt\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser)),\"?\"].join('');\n\nbreak;\ncase \"plus\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser)),\"+\"].join('');\n\nbreak;\ncase \"star\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser)),\"*\"].join('');\n\nbreak;\ncase \"rep\":\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p),new cljs.core.Keyword(null,\"max\",\"max\",61366548).cljs$core$IFn$_invoke$arity$1(p))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser)),\"{\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p)),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"max\",\"max\",61366548).cljs$core$IFn$_invoke$arity$1(p)),\"}\"].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser)),\"{\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p)),\"}\"].join('');\n}\n\nbreak;\ncase \"alt\":\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" | \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null], null), null),hidden_QMARK_),parsers));\n\nbreak;\ncase \"ord\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_,parser1)),\" / \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_,parser2))].join('');\n\nbreak;\ncase \"cat\":\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null,new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_),parsers));\n\nbreak;\ncase \"string\":\nvar sb__4667__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__28584_28631 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__28585_28632 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__28586_28633 = true;\nvar _STAR_print_fn_STAR__temp_val__28587_28634 = (function (x__4668__auto__){\nreturn sb__4667__auto__.append(x__4668__auto__);\n});\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__28586_28633);\n\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__28587_28634);\n\ntry{cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string\",\"string\",-1989541586).cljs$core$IFn$_invoke$arity$1(p)], 0));\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__28585_28632);\n\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__28584_28631);\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4667__auto__);\n\nbreak;\ncase \"string-ci\":\nvar sb__4667__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__28588_28635 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__28589_28636 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__28590_28637 = true;\nvar _STAR_print_fn_STAR__temp_val__28591_28638 = (function (x__4668__auto__){\nreturn sb__4667__auto__.append(x__4668__auto__);\n});\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__28590_28637);\n\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__28591_28638);\n\ntry{cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string\",\"string\",-1989541586).cljs$core$IFn$_invoke$arity$1(p)], 0));\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__28589_28636);\n\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__28588_28635);\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4667__auto__);\n\nbreak;\ncase \"char\":\nreturn instaparse.print.char_range__GT_str(p);\n\nbreak;\ncase \"regexp\":\nreturn instaparse.print.regexp__GT_str(new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782).cljs$core$IFn$_invoke$arity$1(p));\n\nbreak;\ncase \"nt\":\nreturn cljs.core.subs.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747).cljs$core$IFn$_invoke$arity$1(p)),(1));\n\nbreak;\ncase \"look\":\nreturn [\"&\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser))].join('');\n\nbreak;\ncase \"neg\":\nreturn [\"!\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound(hidden_QMARK_,parser))].join('');\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__28583__$1)].join('')));\n\n}\n}\n}));\n\n(instaparse.print.combinators__GT_str.cljs$lang$maxFixedArity = 2);\n\n/**\n * Takes a non-terminal symbol and a parser built from combinators,\n * and returns a string for the rule.\n */\ninstaparse.print.rule__GT_str = (function instaparse$print$rule__GT_str(non_terminal,parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"reduction-type\",\"reduction-type\",-488293450).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser)),new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272))){\nreturn [\"<\",cljs.core.name(non_terminal),\">\",\" = \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1(parser))].join('');\n} else {\nreturn [cljs.core.name(non_terminal),\" = \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1(parser))].join('');\n}\n});\n/**\n * Takes a Parser object, i.e., something with a grammar map and a start \n * production keyword, and stringifies it.\n */\ninstaparse.print.Parser__GT_str = (function instaparse$print$Parser__GT_str(p__28592){\nvar map__28593 = p__28592;\nvar map__28593__$1 = (((((!((map__28593 == null))))?(((((map__28593.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28593.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28593):map__28593);\nvar grammar = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28593__$1,new cljs.core.Keyword(null,\"grammar\",\"grammar\",1881328267));\nvar start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28593__$1,new cljs.core.Keyword(null,\"start-production\",\"start-production\",687546537));\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.cons(instaparse.print.rule__GT_str(start,(grammar.cljs$core$IFn$_invoke$arity$1 ? grammar.cljs$core$IFn$_invoke$arity$1(start) : grammar.call(null,start))),(function (){var iter__4529__auto__ = (function instaparse$print$Parser__GT_str_$_iter__28595(s__28596){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__28596__$1 = s__28596;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__28596__$1);\nif(temp__5735__auto__){\nvar s__28596__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__28596__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__28596__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__28598 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__28597 = (0);\nwhile(true){\nif((i__28597 < size__4528__auto__)){\nvar vec__28599 = cljs.core._nth(c__4527__auto__,i__28597);\nvar non_terminal = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28599,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28599,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(non_terminal,start)){\ncljs.core.chunk_append(b__28598,instaparse.print.rule__GT_str(non_terminal,parser));\n\nvar G__28661 = (i__28597 + (1));\ni__28597 = G__28661;\ncontinue;\n} else {\nvar G__28666 = (i__28597 + (1));\ni__28597 = G__28666;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28598),instaparse$print$Parser__GT_str_$_iter__28595(cljs.core.chunk_rest(s__28596__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28598),null);\n}\n} else {\nvar vec__28602 = cljs.core.first(s__28596__$2);\nvar non_terminal = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28602,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28602,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(non_terminal,start)){\nreturn cljs.core.cons(instaparse.print.rule__GT_str(non_terminal,parser),instaparse$print$Parser__GT_str_$_iter__28595(cljs.core.rest(s__28596__$2)));\n} else {\nvar G__28671 = cljs.core.rest(s__28596__$2);\ns__28596__$1 = G__28671;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(grammar);\n})()));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.","~:file","instaparse/print.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.print","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^P","~$str","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.",["^Y",["^U",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","instaparse/print.cljc"],"~:compiled-at",1613692088106,"~:resource-name","instaparse/print.cljc","~:warnings",[],"~:source","(ns instaparse.print\r\n  \"Facilities for taking parsers and grammars, and converting them to strings.\r\n   Used for pretty-printing.\"\r\n  (:require [clojure.string :as str]))\r\n\r\n(declare combinators->str) ; mutual recursion\r\n\r\n(defn paren-for-tags [tag-set hidden? parser]\r\n  (if (and (not hidden?) (tag-set (parser :tag)))\r\n    (str \"(\" (combinators->str parser false) \")\")\r\n    (combinators->str parser false)))\r\n\r\n(def paren-for-compound \r\n  (partial paren-for-tags #{:alt :ord :cat}))\r\n\r\n(defn regexp-replace\r\n  \"Replaces whitespace characters with escape sequences for better printing\" \r\n  [s]\r\n  (case s\r\n    \"\\n\" \"\\\\n\"\r\n    \"\\b\" \"\\\\b\"\r\n    \"\\f\" \"\\\\f\"\r\n    \"\\r\" \"\\\\r\"\r\n    \"\\t\" \"\\\\t\"\r\n    s)) \r\n\r\n(defn regexp->str [r]\r\n  (str/replace \r\n    (str \"#\\\"\"\r\n         #?(:clj (str r)\r\n            :cljs (subs (.-source r) 1))\r\n         \"\\\"\")\r\n    #\"[\\s]\" regexp-replace))\r\n\r\n#?(:clj\r\n   (defn char-range->str [{:keys [lo hi]}]\r\n     (if (= lo hi)\r\n       (format \"%%x%04x\" lo)\r\n       (format \"%%x%04x-%04x\" lo hi)))\r\n\r\n   :cljs\r\n   (do\r\n     (defn number->hex-padded [n]\r\n       (if (<= n 0xFFF)\r\n         (.substr (str \"0000\" (.toString n 16)) -4)\r\n         (.toString n 16)))\r\n\r\n     (defn char-range->str [{:keys [lo hi]}]\r\n       (if (= lo hi)\r\n         (str \"%x\" (number->hex-padded lo))\r\n         (str \"%x\" (number->hex-padded lo) \"-\" (number->hex-padded hi))))))\r\n\r\n(defn combinators->str\r\n  \"Stringifies a parser built from combinators\"\r\n  ([p] (combinators->str p false))\r\n  ([{:keys [parser parser1 parser2 parsers tag] :as p} hidden?]\r\n    (if (and (not hidden?) (:hide p))\r\n      (str \\< (combinators->str p true) \\>)\r\n      (case tag\r\n        :epsilon \"\\u03b5\"\r\n        :opt (str (paren-for-compound hidden? parser) \"?\")\r\n        :plus (str (paren-for-compound hidden? parser) \"+\")\r\n        :star (str (paren-for-compound hidden? parser) \"*\")\r\n        :rep (if (not= (:min p) (:max p))\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p) \\, (:max p) \\})\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p)\\}))\r\n        :alt (str/join \" | \" (map (partial paren-for-tags #{:ord} hidden?) parsers))\r\n        :ord (str (paren-for-tags #{:alt} hidden? parser1)\r\n                  \" / \"\r\n                  (paren-for-tags #{:alt} hidden? parser2))\r\n        :cat (str/join \" \" (map (partial paren-for-tags #{:alt :ord} hidden?) parsers))\r\n        :string (with-out-str (pr (:string p)))\r\n        :string-ci (with-out-str (pr (:string p)))\r\n        :char (char-range->str p)\r\n        :regexp (regexp->str (:regexp p))\r\n        :nt (subs (str (:keyword p)) 1)\r\n        :look (str \"&\" (paren-for-compound hidden? parser))\r\n        :neg (str \"!\" (paren-for-compound hidden? parser))))))\r\n  \r\n(defn rule->str\r\n  \"Takes a non-terminal symbol and a parser built from combinators,\r\n   and returns a string for the rule.\"\r\n  [non-terminal parser]\r\n  (if (= (-> parser :red :reduction-type) :raw)\r\n    (str \\< (name non-terminal) \\> \r\n         \" = \" \r\n         (combinators->str parser))\r\n    (str (name non-terminal)\r\n         \" = \" \r\n         (combinators->str parser))))\r\n\r\n(defn Parser->str\r\n  \"Takes a Parser object, i.e., something with a grammar map and a start \r\n   production keyword, and stringifies it.\" \r\n  [{grammar :grammar start :start-production}]\r\n  (str/join \\newline\r\n            (cons\r\n              ; Put starting production first\r\n              (rule->str start (grammar start))\r\n              ; Then the others\r\n              (for [[non-terminal parser] grammar\r\n                    :when (not= non-terminal start)]\r\n                (rule->str non-terminal parser)))))\r\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["instaparse.print/paren-for-tags","tag-set","hidden?","parser","cljs.core/not","G__28562","instaparse.print/combinators->str","instaparse.print/paren-for-compound","cljs.core.partial","instaparse.print/regexp-replace","s","G__28563","instaparse.print/regexp->str","r","clojure.string/replace","cljs.core.subs","instaparse.print/number->hex-padded","n","p__28566","map__28567","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","instaparse.print/char-range->str","lo","hi","cljs.core._EQ_","var_args","G__28579","js/Error","p__28580","map__28581","p","instaparse.print.combinators__GT_str","parser1","parser2","parsers","tag","G__28583","cljs.core/Keyword","cljs.core.not_EQ_","clojure.string.join","cljs.core.map","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__28584","cljs.core/*print-newline*","*print-fn*-orig-val__28585","cljs.core/*print-fn*","*print-newline*-temp-val__28586","*print-fn*-temp-val__28587","x__4668__auto__","cljs.core.pr","*print-newline*-orig-val__28588","*print-fn*-orig-val__28589","*print-newline*-temp-val__28590","*print-fn*-temp-val__28591","instaparse.print/rule->str","non-terminal","cljs.core/name","p__28592","map__28593","instaparse.print/Parser->str","grammar","start","cljs.core/cons","iter__4529__auto__","s__28596","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28598","cljs.core/chunk-buffer","i__28597","vec__28599","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28595","cljs.core/chunk-rest","vec__28602","cljs.core/first","cljs.core/rest","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$clojure.string/join","~$instaparse.print/rule->str","~$instaparse.print/number->hex-padded","~$cljs.core/=","~$instaparse.print/paren-for-compound","~$cljs.core/partial","~$instaparse.print/regexp-replace","~$cljs.core/pr","~$cljs.core/not=","~$cljs.core/*print-newline*","~$instaparse.print/regexp->str","~$cljs.core/map","~$instaparse.print/combinators->str","~$instaparse.print/char-range->str","~$instaparse.print/paren-for-tags","~$clojure.string/replace","~$cljs.core/*print-fn*","~$cljs.core/not","~$cljs.core/cons","~$instaparse.print/Parser->str","~$cljs.core/name","~$cljs.core/subs","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^14","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^14","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^14","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^26"]]],["^14","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23"]]],["^14","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23"]]],"~:SHADOW-TIMESTAMP",[1610389887000,1610389887000,1609369123000],["^14","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","~$goog.reflect"]]],["^14","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","~$goog.html.trustedtypes","^29","^2:","^2;","^2<"]]],["^14","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","~$goog.html.SafeUrl","^2;","^2<","^26"]]],["^14","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2@","^28","~$goog.html.uncheckedconversions","^2;","^26"]]],["^14","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","~$goog.dom.TagName","~$goog.dom.tags","^2D","^2E","~$goog.html.SafeStyleSheet","^2@","^28","^2?","^29","^2:","~$goog.labs.userAgent.browser","^25","^2;","^2<","^26"]]],["^14","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^25"]]],["^14","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","instaparse/print.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^R","^P"]]],["^14","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",[]]],["^14","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^25"]]],["^14","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^R","^2O","~$goog.string.StringBuffer"]]],["^14","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","~$goog.dom.safe","^2F","^2;","^26"]]],["^14","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^26"]]],["^14","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","^2B","~$goog.math"]]],["^14","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","^2C","^2D","^2E","^2K","^2@","^28","^2;","^26"]]],["^14","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S"]]],["^14","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","~$goog.math.Long","~$goog.math.Integer","^2O","^25","^22","~$goog.Uri","^2U"]]],["^14","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","^2?","^2;","^2<"]]],["^14","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","^2E","^25","^2;","^2<","^26"]]],["^14","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^2>"]]],["^14","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^22","^23","^2O"]]],["^14","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Y",["^ ","^1Z",null,"^1[",["^I",[]],"^20",["^S","^23","^2<"]]]]],"~:clj-info",["^ ","jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1609185187000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.","^7","instaparse/print.cljc","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U"]],"~:shadow/js-access-global",["^I",["Error"]],"^V",null,"~:defs",["^ ","~$regexp-replace",["^ ","~:protocol-inline",null,"^5",["^ ","^7","instaparse/print.cljc","^8",16,"^9",7,"^:",16,"^;",21,"~:arglists",["^Y",["~$quote",["^Y",[["~$s"]]]]],"^6","Replaces whitespace characters with escape sequences for better printing"],"^J","^1F","^7","instaparse/print.cljc","^;",21,"~:method-params",["^Y",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"~:variadic?",false,"^8",16,"^:",16,"~:max-fixed-arity",1,"~:fn-var",true,"^3M",["^Y",["^3N",["^Y",[["~$s"]]]]],"^6","Replaces whitespace characters with escape sequences for better printing"],"~$combinators->str",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",53,"^9",7,"^:",53,"^;",23,"^3M",["^Y",["^3N",["^Y",[["~$p"],[["^ ","~:keys",["~$parser","~$parser1","~$parser2","~$parsers","~$tag"],"^[","~$p"],"~$hidden?"]]]]],"^6","Stringifies a parser built from combinators","~:top-fn",["^ ","^3R",false,"~:fixed-arity",2,"^3S",2,"^3O",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]],"^3M",["^Y",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]]],"^3Q",["^Y",[null,null]]]],"^J","^1L","^7","instaparse/print.cljc","^;",23,"^41",["^ ","^3R",false,"^42",2,"^3S",2,"^3O",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]],"^3M",["^Y",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]]],"^3Q",["^Y",[null,null]]],"^3O",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]],"^3P",null,"^42",2,"^3Q",["^Y",[null,null]],"^9",1,"^3R",false,"~:methods",[["^ ","^42",1,"^3R",false,"~:tag","~$any"],["^ ","^42",2,"^3R",false,"^44",["^I",[null,"~$string"]]]],"^8",53,"^:",53,"^3S",2,"^3T",true,"^3M",["^Y",[["~$p"],[["^ ","^3V",["^3W","^3X","^3Y","^3Z","^3["],"^[","~$p"],"^40"]]],"^6","Stringifies a parser built from combinators"],"~$char-range->str",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",48,"^9",12,"^:",48,"^;",27,"^3M",["^Y",["^3N",["^Y",[[["^ ","^3V",["~$lo","~$hi"]]]]]]]],"^J","^1M","^7","instaparse/print.cljc","^;",27,"^3O",["^Y",[["~$p__28566"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",6,"^3R",false,"^8",48,"~:ret-tag","^46","^:",48,"^3S",1,"^3T",true,"^3M",["^Y",["^3N",["^Y",[[["^ ","^3V",["^48","^49"]]]]]]]],"~$Parser->str",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",94,"^9",7,"^:",94,"^;",18,"^3M",["^Y",["^3N",["^Y",[[["^ ","~$grammar","~:grammar","~$start","~:start-production"]]]]]],"^6","Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."],"^J","^1S","^7","instaparse/print.cljc","^;",18,"^3O",["^Y",[["~$p__28592"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",1,"^3R",false,"^8",94,"^4;","^46","^:",94,"^3S",1,"^3T",true,"^3M",["^Y",["^3N",["^Y",[[["^ ","^4=","^4>","^4?","^4@"]]]]]],"^6","Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."],"~$paren-for-tags",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",8,"^9",7,"^:",8,"^;",21,"^3M",["^Y",["^3N",["^Y",[["~$tag-set","^40","^3W"]]]]]],"^J","^1N","^7","instaparse/print.cljc","^;",21,"^3O",["^Y",[["^4C","^40","^3W"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",1,"^3R",false,"^8",8,"^4;",["^I",["^45","^46"]],"^:",8,"^3S",3,"^3T",true,"^3M",["^Y",["^3N",["^Y",[["^4C","^40","^3W"]]]]]],"~$regexp->str",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",27,"^9",7,"^:",27,"^;",18,"^3M",["^Y",["^3N",["^Y",[["~$r"]]]]]],"^J","^1J","^7","instaparse/print.cljc","^;",18,"^3O",["^Y",[["~$r"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",1,"^3R",false,"^8",27,"^4;","^46","^:",27,"^3S",1,"^3T",true,"^3M",["^Y",["^3N",["^Y",[["~$r"]]]]]],"~$rule->str",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",82,"^9",7,"^:",82,"^;",16,"^3M",["^Y",["^3N",["^Y",[["~$non-terminal","^3W"]]]]],"^6","Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."],"^J","^1A","^7","instaparse/print.cljc","^;",16,"^3O",["^Y",[["^4F","^3W"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",1,"^3R",false,"^8",82,"^4;","^46","^:",82,"^3S",2,"^3T",true,"^3M",["^Y",["^3N",["^Y",[["^4F","^3W"]]]]],"^6","Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."],"~$number->hex-padded",["^ ","^3L",null,"^5",["^ ","^7","instaparse/print.cljc","^8",43,"^9",12,"^:",43,"^;",30,"^3M",["^Y",["^3N",["^Y",[["~$n"]]]]]],"^J","^1B","^7","instaparse/print.cljc","^;",30,"^3O",["^Y",[["~$n"]]],"^3P",null,"^3Q",["^Y",[null,null]],"^9",6,"^3R",false,"^8",43,"^4;","^45","^:",43,"^3S",1,"^3T",true,"^3M",["^Y",["^3N",["^Y",[["~$n"]]]]]],"~$paren-for-compound",["^ ","^J","^1D","^7","instaparse/print.cljc","^8",13,"^9",1,"^:",13,"^;",24,"^5",["^ ","^7","instaparse/print.cljc","^8",13,"^9",6,"^:",13,"^;",24],"^44","~$function"]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:parser2","~:cat","~:min","~:ord","~:alt","~:raw","^4@","^4>","~:string","~:lo","~:hide","~:parser","~:regexp","~:parser1","~:keyword","~:max","~:red","~:reduction-type","^44","~:parsers","~:hi"]],"~:order",["^44","^4L","^4N","^4O","^4R","^50","^4T","^4V","^4K","^4[","^4S","^4M","^4X","^4Q","^4U","^4W","^4Z","^4Y","^4P","^4>","^4@"]],"^10",["^ ","^U",["^I",[]]],"^11",["^ "],"^12",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^1X",[["^54","~:static-fns"],true,["^54","~:shadow-tweaks"],null,["^54","~:source-map-inline"],null,["^54","~:elide-asserts"],false,["^54","~:optimize-constants"],null,["^54","^17"],null,["^54","~:external-config"],null,["^54","~:tooling-config"],null,["^54","~:emit-constants"],null,["^54","~:load-tests"],null,["^54","~:form-size-threshold"],null,["^54","~:data-readers"],null,["^54","~:infer-externs"],"~:auto",["^54","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^54","~:fn-invoke-direct"],null,["^54","~:source-map"],"/dev/null"]]]