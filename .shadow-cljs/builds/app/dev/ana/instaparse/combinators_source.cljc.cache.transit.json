["^ ","~:output",["^ ","~:js","goog.provide('instaparse.combinators_source');\ninstaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"epsilon\",\"epsilon\",-730158570)], null);\n/**\n * Optional, i.e., parser?\n */\ninstaparse.combinators_source.opt = (function instaparse$combinators_source$opt(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * One or more, i.e., parser+\n */\ninstaparse.combinators_source.plus = (function instaparse$combinators_source$plus(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"plus\",\"plus\",211540661),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * Zero or more, i.e., parser*\n */\ninstaparse.combinators_source.star = (function instaparse$combinators_source$star(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"star\",\"star\",279424429),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * Between m and n repetitions\n */\ninstaparse.combinators_source.rep = (function instaparse$combinators_source$rep(m,n,parser){\nif((m <= n)){\n} else {\nthrow (new Error(\"Assert failed: (<= m n)\"));\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"rep\",\"rep\",-1226820564),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser,new cljs.core.Keyword(null,\"min\",\"min\",444991522),m,new cljs.core.Keyword(null,\"max\",\"max\",61366548),n], null);\n}\n});\n/**\n * Alternation, i.e., parser1 | parser2 | parser3 | ...\n */\ninstaparse.combinators_source.alt = (function instaparse$combinators_source$alt(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___28773 = arguments.length;\nvar i__4737__auto___28774 = (0);\nwhile(true){\nif((i__4737__auto___28774 < len__4736__auto___28773)){\nargs__4742__auto__.push((arguments[i__4737__auto___28774]));\n\nvar G__28775 = (i__4737__auto___28774 + (1));\ni__4737__auto___28774 = G__28775;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic = (function (parsers){\nif(cljs.core.every_QMARK_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,instaparse.combinators_source.Epsilon),parsers)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nif(instaparse.reduction.singleton_QMARK_(parsers)){\nreturn cljs.core.first(parsers);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),parsers], null);\n\n}\n}\n}));\n\n(instaparse.combinators_source.alt.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(instaparse.combinators_source.alt.cljs$lang$applyTo = (function (seq28704){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq28704));\n}));\n\ninstaparse.combinators_source.ord2 = (function instaparse$combinators_source$ord2(parser1,parser2){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),parser1,new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),parser2], null);\n});\n/**\n * Ordered choice, i.e., parser1 / parser2\n */\ninstaparse.combinators_source.ord = (function instaparse$combinators_source$ord(var_args){\nvar G__28709 = arguments.length;\nswitch (G__28709) {\ncase 0:\nreturn instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nvar args_arr__4757__auto__ = [];\nvar len__4736__auto___28783 = arguments.length;\nvar i__4737__auto___28784 = (0);\nwhile(true){\nif((i__4737__auto___28784 < len__4736__auto___28783)){\nargs_arr__4757__auto__.push((arguments[i__4737__auto___28784]));\n\nvar G__28785 = (i__4737__auto___28784 + (1));\ni__4737__auto___28784 = G__28785;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4758__auto__ = (new cljs.core.IndexedSeq(args_arr__4757__auto__.slice((1)),(0),null));\nreturn instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4758__auto__);\n\n}\n});\n\n(instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn instaparse.combinators_source.Epsilon;\n}));\n\n(instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic = (function (parser1,parsers){\nvar parsers__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser1,instaparse.combinators_source.Epsilon))?cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([instaparse.combinators_source.Epsilon]),parsers):parsers);\nif(cljs.core.seq(parsers__$1)){\nreturn instaparse.combinators_source.ord2(parser1,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.ord,parsers__$1));\n} else {\nreturn parser1;\n}\n}));\n\n/** @this {Function} */\n(instaparse.combinators_source.ord.cljs$lang$applyTo = (function (seq28707){\nvar G__28708 = cljs.core.first(seq28707);\nvar seq28707__$1 = cljs.core.next(seq28707);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28708,seq28707__$1);\n}));\n\n(instaparse.combinators_source.ord.cljs$lang$maxFixedArity = (1));\n\n/**\n * Concatenation, i.e., parser1 parser2 ...\n */\ninstaparse.combinators_source.cat = (function instaparse$combinators_source$cat(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___28792 = arguments.length;\nvar i__4737__auto___28793 = (0);\nwhile(true){\nif((i__4737__auto___28793 < len__4736__auto___28792)){\nargs__4742__auto__.push((arguments[i__4737__auto___28793]));\n\nvar G__28794 = (i__4737__auto___28793 + (1));\ni__4737__auto___28793 = G__28794;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic = (function (parsers){\nif(cljs.core.every_QMARK_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,instaparse.combinators_source.Epsilon),parsers)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nvar parsers__$1 = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([instaparse.combinators_source.Epsilon]),parsers);\nif(instaparse.reduction.singleton_QMARK_(parsers__$1)){\nreturn cljs.core.first(parsers__$1);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),parsers__$1], null);\n}\n}\n}));\n\n(instaparse.combinators_source.cat.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(instaparse.combinators_source.cat.cljs$lang$applyTo = (function (seq28710){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq28710));\n}));\n\n/**\n * Create a string terminal out of s\n */\ninstaparse.combinators_source.string = (function instaparse$combinators_source$string(s){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(s,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),s], null);\n}\n});\n/**\n * Create a case-insensitive string terminal out of s\n */\ninstaparse.combinators_source.string_ci = (function instaparse$combinators_source$string_ci(s){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(s,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"string-ci\",\"string-ci\",374631805),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),s], null);\n}\n});\n/**\n * Matches a Unicode code point or a range of code points\n */\ninstaparse.combinators_source.unicode_char = (function instaparse$combinators_source$unicode_char(var_args){\nvar G__28715 = arguments.length;\nswitch (G__28715) {\ncase 1:\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1 = (function (code_point){\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2(code_point,code_point);\n}));\n\n(instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2 = (function (lo,hi){\nif((lo <= hi)){\n} else {\nthrow (new Error([\"Assert failed: \",\"Character range minimum must be less than or equal the maximum\",\"\\n\",\"(<= lo hi)\"].join('')));\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"char\",\"char\",-641587586),new cljs.core.Keyword(null,\"lo\",\"lo\",-931799889),lo,new cljs.core.Keyword(null,\"hi\",\"hi\",-1821422114),hi], null);\n}));\n\n(instaparse.combinators_source.unicode_char.cljs$lang$maxFixedArity = 2);\n\n/**\n * JavaScript regexes have no .lookingAt method, so in cljs we just\n *   add a '^' character to the front of the regex.\n */\ninstaparse.combinators_source.add_beginning_constraint = (function instaparse$combinators_source$add_beginning_constraint(r){\nif(cljs.core.regexp_QMARK_(r)){\nreturn (new RegExp([\"^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(r.source)].join(''),instaparse.util.regexp_flags(r)));\n} else {\nreturn r;\n}\n});\n/**\n * Create a regexp terminal out of regular expression r\n */\ninstaparse.combinators_source.regexp = (function instaparse$combinators_source$regexp(r){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(r,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782),new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782),instaparse.combinators_source.add_beginning_constraint(cljs.core.re_pattern(r))], null);\n}\n});\n/**\n * Refers to a non-terminal defined by the grammar map\n */\ninstaparse.combinators_source.nt = (function instaparse$combinators_source$nt(s){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"nt\",\"nt\",-835425781),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),s], null);\n});\n/**\n * Lookahead, i.e., &parser\n */\ninstaparse.combinators_source.look = (function instaparse$combinators_source$look(parser){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"look\",\"look\",-539441433),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n});\n/**\n * Negative lookahead, i.e., !parser\n */\ninstaparse.combinators_source.neg = (function instaparse$combinators_source$neg(parser){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"neg\",\"neg\",1800032960),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n});\n/**\n * Hide the result of parser, i.e., <parser>\n */\ninstaparse.combinators_source.hide = (function instaparse$combinators_source$hide(parser){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser,new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169),true);\n});\n/**\n * Hide the tag associated with this rule.  \n *   Wrap this combinator around the entire right-hand side.\n */\ninstaparse.combinators_source.hide_tag = (function instaparse$combinators_source$hide_tag(parser){\nreturn instaparse.reduction.red(parser,instaparse.reduction.raw_non_terminal_reduction);\n});\n/**\n * Tests whether parser was created with hide-tag combinator\n */\ninstaparse.combinators_source.hidden_tag_QMARK_ = (function instaparse$combinators_source$hidden_tag_QMARK_(parser){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser),instaparse.reduction.raw_non_terminal_reduction);\n});\n/**\n * Recursively undoes the effect of hide on one parser\n */\ninstaparse.combinators_source.unhide_content = (function instaparse$combinators_source$unhide_content(parser){\nvar parser__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(parser))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parser,new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169)):parser);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(parser__$1))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser__$1,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),(function (){var G__28721 = new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__28721) : instaparse.combinators_source.unhide_content.call(null,G__28721));\n})());\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser__$1))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser__$1,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),cljs.core.map.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.unhide_content,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser__$1)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(parser__$1),new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parser__$1,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),(function (){var G__28722 = new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__28722) : instaparse.combinators_source.unhide_content.call(null,G__28722));\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),(function (){var G__28723 = new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__28723) : instaparse.combinators_source.unhide_content.call(null,G__28723));\n})()], 0));\n} else {\nreturn parser__$1;\n\n}\n}\n}\n});\n/**\n * Recursively undoes the effect of hide on all parsers in the grammar\n */\ninstaparse.combinators_source.unhide_all_content = (function instaparse$combinators_source$unhide_all_content(grammar){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4529__auto__ = (function instaparse$combinators_source$unhide_all_content_$_iter__28724(s__28725){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__28725__$1 = s__28725;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__28725__$1);\nif(temp__5735__auto__){\nvar s__28725__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__28725__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__28725__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__28727 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__28726 = (0);\nwhile(true){\nif((i__28726 < size__4528__auto__)){\nvar vec__28728 = cljs.core._nth(c__4527__auto__,i__28726);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28728,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28728,(1),null);\ncljs.core.chunk_append(b__28727,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,instaparse.combinators_source.unhide_content(v)], null));\n\nvar G__28857 = (i__28726 + (1));\ni__28726 = G__28857;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28727),instaparse$combinators_source$unhide_all_content_$_iter__28724(cljs.core.chunk_rest(s__28725__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28727),null);\n}\n} else {\nvar vec__28732 = cljs.core.first(s__28725__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28732,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28732,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,instaparse.combinators_source.unhide_content(v)], null),instaparse$combinators_source$unhide_all_content_$_iter__28724(cljs.core.rest(s__28725__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(grammar);\n})());\n});\n/**\n * Recursively undoes the effect of hide-tag\n */\ninstaparse.combinators_source.unhide_tags = (function instaparse$combinators_source$unhide_tags(reduction_type,grammar){\nvar temp__5733__auto__ = (instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1 ? instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1(reduction_type) : instaparse.reduction.reduction_types.call(null,reduction_type));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar reduction = temp__5733__auto__;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4529__auto__ = (function instaparse$combinators_source$unhide_tags_$_iter__28735(s__28736){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__28736__$1 = s__28736;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__28736__$1);\nif(temp__5735__auto__){\nvar s__28736__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__28736__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__28736__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__28738 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__28737 = (0);\nwhile(true){\nif((i__28737 < size__4528__auto__)){\nvar vec__28739 = cljs.core._nth(c__4527__auto__,i__28737);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28739,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28739,(1),null);\ncljs.core.chunk_append(b__28738,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null));\n\nvar G__28864 = (i__28737 + (1));\ni__28737 = G__28864;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28738),instaparse$combinators_source$unhide_tags_$_iter__28735(cljs.core.chunk_rest(s__28736__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28738),null);\n}\n} else {\nvar vec__28742 = cljs.core.first(s__28736__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28742,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28742,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null),instaparse$combinators_source$unhide_tags_$_iter__28735(cljs.core.rest(s__28736__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(grammar);\n})());\n} else {\nreturn instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid output format \",reduction_type,\". Use :enlive or :hiccup.\"], 0));\n}\n});\n/**\n * Recursively undoes the effect of both hide and hide-tag\n */\ninstaparse.combinators_source.unhide_all = (function instaparse$combinators_source$unhide_all(reduction_type,grammar){\nvar temp__5733__auto__ = (instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1 ? instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1(reduction_type) : instaparse.reduction.reduction_types.call(null,reduction_type));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar reduction = temp__5733__auto__;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4529__auto__ = (function instaparse$combinators_source$unhide_all_$_iter__28745(s__28746){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__28746__$1 = s__28746;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__28746__$1);\nif(temp__5735__auto__){\nvar s__28746__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__28746__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__28746__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__28748 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__28747 = (0);\nwhile(true){\nif((i__28747 < size__4528__auto__)){\nvar vec__28749 = cljs.core._nth(c__4527__auto__,i__28747);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28749,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28749,(1),null);\ncljs.core.chunk_append(b__28748,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.unhide_content(v),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null));\n\nvar G__28866 = (i__28747 + (1));\ni__28747 = G__28866;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28748),instaparse$combinators_source$unhide_all_$_iter__28745(cljs.core.chunk_rest(s__28746__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28748),null);\n}\n} else {\nvar vec__28752 = cljs.core.first(s__28746__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28752,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28752,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.unhide_content(v),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null),instaparse$combinators_source$unhide_all_$_iter__28745(cljs.core.rest(s__28746__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(grammar);\n})());\n} else {\nreturn instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid output format \",reduction_type,\". Use :enlive or :hiccup.\"], 0));\n}\n});\ninstaparse.combinators_source.auto_whitespace_parser = (function instaparse$combinators_source$auto_whitespace_parser(parser,ws_parser){\nvar G__28756 = new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__28756__$1 = (((G__28756 instanceof cljs.core.Keyword))?G__28756.fqn:null);\nswitch (G__28756__$1) {\ncase \"nt\":\ncase \"epsilon\":\nreturn parser;\n\nbreak;\ncase \"opt\":\ncase \"plus\":\ncase \"star\":\ncase \"rep\":\ncase \"look\":\ncase \"neg\":\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(parser,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310)], null),instaparse.combinators_source.auto_whitespace_parser,ws_parser);\n\nbreak;\ncase \"alt\":\ncase \"cat\":\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__28755_SHARP_){\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(p1__28755_SHARP_,ws_parser) : instaparse.combinators_source.auto_whitespace_parser.call(null,p1__28755_SHARP_,ws_parser));\n}),new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser)));\n\nbreak;\ncase \"ord\":\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parser,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),(function (){var G__28757 = new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__28758 = ws_parser;\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(G__28757,G__28758) : instaparse.combinators_source.auto_whitespace_parser.call(null,G__28757,G__28758));\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),(function (){var G__28759 = new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__28760 = ws_parser;\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(G__28759,G__28760) : instaparse.combinators_source.auto_whitespace_parser.call(null,G__28759,G__28760));\n})()], 0));\n\nbreak;\ncase \"string\":\ncase \"string-ci\":\ncase \"regexp\":\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ws_parser,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parser,new cljs.core.Keyword(null,\"red\",\"red\",-969428204))], 0)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser));\n} else {\nreturn instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ws_parser,parser], 0));\n}\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__28756__$1)].join('')));\n\n}\n});\ninstaparse.combinators_source.auto_whitespace = (function instaparse$combinators_source$auto_whitespace(grammar,start,grammar_ws,start_ws){\nvar ws_parser = instaparse.combinators_source.hide(instaparse.combinators_source.opt(instaparse.combinators_source.nt(start_ws)));\nvar grammar_ws__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(grammar_ws,start_ws,instaparse.combinators_source.hide_tag((grammar_ws.cljs$core$IFn$_invoke$arity$1 ? grammar_ws.cljs$core$IFn$_invoke$arity$1(start_ws) : grammar_ws.call(null,start_ws))));\nvar modified_grammar = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4529__auto__ = (function instaparse$combinators_source$auto_whitespace_$_iter__28761(s__28762){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__28762__$1 = s__28762;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__28762__$1);\nif(temp__5735__auto__){\nvar s__28762__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__28762__$2)){\nvar c__4527__auto__ = cljs.core.chunk_first(s__28762__$2);\nvar size__4528__auto__ = cljs.core.count(c__4527__auto__);\nvar b__28764 = cljs.core.chunk_buffer(size__4528__auto__);\nif((function (){var i__28763 = (0);\nwhile(true){\nif((i__28763 < size__4528__auto__)){\nvar vec__28765 = cljs.core._nth(c__4527__auto__,i__28763);\nvar nt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28765,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28765,(1),null);\ncljs.core.chunk_append(b__28764,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt,instaparse.combinators_source.auto_whitespace_parser(parser,ws_parser)], null));\n\nvar G__28890 = (i__28763 + (1));\ni__28763 = G__28890;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28764),instaparse$combinators_source$auto_whitespace_$_iter__28761(cljs.core.chunk_rest(s__28762__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__28764),null);\n}\n} else {\nvar vec__28768 = cljs.core.first(s__28762__$2);\nvar nt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28768,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28768,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt,instaparse.combinators_source.auto_whitespace_parser(parser,ws_parser)], null),instaparse$combinators_source$auto_whitespace_$_iter__28761(cljs.core.rest(s__28762__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4529__auto__(grammar);\n})());\nvar final_grammar = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(modified_grammar,start,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2((modified_grammar.cljs$core$IFn$_invoke$arity$1 ? modified_grammar.cljs$core$IFn$_invoke$arity$1(start) : modified_grammar.call(null,start)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204)),ws_parser], 0)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1((modified_grammar.cljs$core$IFn$_invoke$arity$1 ? modified_grammar.cljs$core$IFn$_invoke$arity$1(start) : modified_grammar.call(null,start)))));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([final_grammar,grammar_ws__$1], 0));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is the underlying implementation of the various combinators.","~:file","instaparse/combinators_source.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$cat"]],"~:name","~$instaparse.combinators-source","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$instaparse.reduction","^Q","~$instaparse.util","^R","~$cljs.core","^S","~$goog","^T"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$singleton?","^Q","~$red","^Q","~$raw-non-terminal-reduction","^Q","~$reduction-types","^Q","~$throw-illegal-argument-exception","^R","~$regexp-flags","^R"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^L","This is the underlying implementation of the various combinators.",["^14",["~:refer-clojure","~:exclude",["^J"]]],["^14",["^V",["^Q","~:refer",["^X","^Y","^Z","^["]],["^R","^18",["^10","^11"]]]]]],"~:flags",["^ ","^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^Q","^R"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","instaparse/combinators_source.cljc"],"~:compiled-at",1613692088305,"~:resource-name","instaparse/combinators_source.cljc","~:warnings",[],"~:source","(ns instaparse.combinators-source\r\n  \"This is the underlying implementation of the various combinators.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.reduction :refer [singleton? red\r\n                                          raw-non-terminal-reduction\r\n                                          reduction-types]]\r\n            [instaparse.util :refer [throw-illegal-argument-exception #?(:cljs regexp-flags)]]))\r\n\r\n;; Ways to build parsers\r\n\r\n(def Epsilon {:tag :epsilon})\r\n\r\n(defn opt \"Optional, i.e., parser?\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :opt :parser parser}))\r\n\r\n(defn plus \"One or more, i.e., parser+\"\r\n  [parser]\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :plus :parser parser}))\r\n\r\n(defn star \"Zero or more, i.e., parser*\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :star :parser parser}))\r\n\r\n(defn rep \"Between m and n repetitions\"\r\n  [m n parser]\r\n  {:pre [(<= m n)]}\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :rep :parser parser :min m :max n}))\r\n\r\n(defn alt \"Alternation, i.e., parser1 | parser2 | parser3 | ...\"\r\n  [& parsers] \r\n  (cond\r\n    (every? (partial = Epsilon) parsers) Epsilon\r\n    (singleton? parsers) (first parsers)\r\n    :else {:tag :alt :parsers parsers}))\r\n\r\n(defn- ord2 [parser1 parser2]\r\n  {:tag :ord :parser1 parser1 :parser2 parser2})\r\n\r\n(defn ord \"Ordered choice, i.e., parser1 / parser2\"\r\n  ([] Epsilon)\r\n  ([parser1 & parsers]\r\n    (let [parsers (if (= parser1 Epsilon)\r\n                    (remove #{Epsilon} parsers)\r\n                    parsers)]\r\n      (if (seq parsers)\r\n        (ord2 parser1 (apply ord parsers))\r\n        parser1))))\r\n\r\n(defn cat \"Concatenation, i.e., parser1 parser2 ...\"\r\n  [& parsers]\r\n  (if (every? (partial = Epsilon) parsers) Epsilon\r\n    (let [parsers (remove #{Epsilon} parsers)]\r\n      (if (singleton? parsers) (first parsers) ; apply vector reduction\r\n        {:tag :cat :parsers parsers}))))\r\n\r\n(defn string \"Create a string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n    {:tag :string :string s}))\r\n\r\n(defn string-ci \"Create a case-insensitive string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n      {:tag :string-ci :string s}))\r\n\r\n(defn unicode-char\r\n  \"Matches a Unicode code point or a range of code points\"\r\n  ([code-point]\r\n   (unicode-char code-point code-point))\r\n  ([lo hi]\r\n   (assert (<= lo hi) \"Character range minimum must be less than or equal the maximum\")\r\n   {:tag :char :lo lo :hi hi}))\r\n\r\n#?(:cljs\r\n   (defn- add-beginning-constraint\r\n     \"JavaScript regexes have no .lookingAt method, so in cljs we just\r\n  add a '^' character to the front of the regex.\"\r\n     [r]\r\n     (if (regexp? r)\r\n       (js/RegExp. (str \"^\" (.-source r)) (regexp-flags r))\r\n       r)))\r\n\r\n(defn regexp \"Create a regexp terminal out of regular expression r\"\r\n  [r]\r\n  (if (= r \"\") Epsilon\r\n      {:tag :regexp\r\n       :regexp (-> (re-pattern r)\r\n                   #?(:cljs add-beginning-constraint))}))\r\n\r\n(defn nt \"Refers to a non-terminal defined by the grammar map\"\r\n  [s] \r\n  {:tag :nt :keyword s})\r\n\r\n(defn look \"Lookahead, i.e., &parser\" \r\n  [parser] \r\n  {:tag :look :parser parser}) \r\n\r\n(defn neg \"Negative lookahead, i.e., !parser\"\r\n  [parser] \r\n  {:tag :neg :parser parser})\r\n\r\n(defn hide \"Hide the result of parser, i.e., <parser>\"\r\n  [parser] \r\n  (assoc parser :hide true))\r\n\r\n(defn hide-tag \"Hide the tag associated with this rule.  \r\n  Wrap this combinator around the entire right-hand side.\"  \r\n  [parser]\r\n  (red parser raw-non-terminal-reduction))\r\n\r\n; Ways to alter a parser with hidden information, unhiding that information\r\n\r\n(defn hidden-tag?\r\n  \"Tests whether parser was created with hide-tag combinator\"\r\n  [parser]\r\n  (= (:red parser) raw-non-terminal-reduction))\r\n\r\n(defn unhide-content\r\n  \"Recursively undoes the effect of hide on one parser\"\r\n  [parser]\r\n  (let [parser (if (:hide parser) (dissoc parser :hide) parser)]\r\n    (cond\r\n      (:parser parser) (assoc parser :parser (unhide-content (:parser parser)))\r\n      (:parsers parser) (assoc parser :parsers (map unhide-content (:parsers parser)))\r\n      (= (:tag parser) :ord) (assoc parser \r\n                                    :parser1 (unhide-content (:parser1 parser))\r\n                                    :parser2 (unhide-content (:parser2 parser)))\r\n      :else parser)))\r\n\r\n(defn unhide-all-content\r\n  \"Recursively undoes the effect of hide on all parsers in the grammar\"\r\n  [grammar]\r\n  (into {} (for [[k v] grammar]\r\n             [k (unhide-content v)])))\r\n\r\n(defn unhide-tags \r\n  \"Recursively undoes the effect of hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc v :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n(defn unhide-all\r\n  \"Recursively undoes the effect of both hide and hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc (unhide-content v) :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n\r\n;; New beta feature: automatically add whitespace\r\n\r\n(defn auto-whitespace-parser [parser ws-parser]\r\n  (case (:tag parser)\r\n    (:nt :epsilon) parser  \r\n    (:opt :plus :star :rep :look :neg) (update-in parser [:parser] auto-whitespace-parser ws-parser)\r\n    (:alt :cat) (assoc parser :parsers  \r\n                       (map #(auto-whitespace-parser % ws-parser) (:parsers parser)))\r\n    :ord (assoc parser \r\n                :parser1 (auto-whitespace-parser (:parser1 parser) ws-parser)\r\n                :parser2 (auto-whitespace-parser (:parser2 parser) ws-parser))\r\n    (:string :string-ci :regexp) \r\n    ; If the string/regexp has a reduction associated with it,\r\n    ; we need to \"lift\" that reduction out to the (cat whitespace string)\r\n    ; parser that is being created.\r\n    (if (:red parser)\r\n      (assoc (cat ws-parser (dissoc parser :red)) :red (:red parser))\r\n      (cat ws-parser parser))))\r\n\r\n(defn auto-whitespace [grammar start grammar-ws start-ws]\r\n  (let [ws-parser (hide (opt (nt start-ws)))\r\n        grammar-ws (assoc grammar-ws start-ws (hide-tag (grammar-ws start-ws)))\r\n        modified-grammar (into {} \r\n                               (for [[nt parser] grammar] \r\n                                 [nt (auto-whitespace-parser parser ws-parser)]))\r\n        final-grammar (assoc modified-grammar start \r\n                             (assoc (cat (dissoc (modified-grammar start) :red) \r\n                                         ws-parser)\r\n                                    :red (:red (modified-grammar start))))]\r\n    (merge final-grammar grammar-ws)))\r\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAUA,AAAA,AAAA,AAAA,AAAKA;AAEL;;;AAAA,AAAMC,AACHC;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACqBE;;;AAEvB;;;AAAA,AAAME,AACHF;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACsBE;;;AAExB;;;AAAA,AAAMG,AACHH;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACsBE;;;AAExB;;;AAAA,AAAMK,AACHC,AAAEC,AAAEP;AADP,AAAA,AAES,AAAIM,AAAEC;AAFf;AAAA,AAAA,AAAA,AAAAH,AAAA;;;AAGE,AAAI,AAACH,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AAAA,AAAA,AACqBE,AAAYM,AAAOC;;;AAE1C,AAAA;;;AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AACE,AAACC,AAAO,AAACC,AAAQC,AAAEvB,AAASoB;AAASpB;;AADvC,AAEE,AAACwB,AAAWJ;AAAS,AAACK,AAAML;;AAF9B,AAAA,AAAA,AAAA,AAAA,AAG4BA;;;;;;AAL9B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA,AAAOS,AAAMC,AAAQC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AACsBD,AAAiBC;;AAEvC,AAAA;;;AAAA,AAAAlB,AAAMoB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAnB,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAmB,AAAA,AAAA,AAAAlB;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAmB,AAAA,AAAAjB,AAAA,AAAAgB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAE;;;;;AAAA,AAAA,AAAA,AAAMF;AAAN,AACM9B;;;AADN,AAAA,AAAA,AAAA,AAAM8B,AAEFH,AAAUP;AAFd,AAGI,AAAMA,AAAQ,AAAI,AAACjB,AAAEwB,AAAQ3B,AACb,AAAA,AAACqC,AAASrC,AAASoB,AACnBA;AAFhB,AAGE,AAAI,AAACD,AAAIC;AACP,AAACM,AAAKC,AAAQ,AAACW,AAAMR,AAAIV;;AACzBO;;;;AARR;AAAA,AAAA,AAAA,AAAAM,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAT,AAAAQ;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAAA,AAAA,AAAMH;;AAAN,AAUA,AAAA;;;AAAA,AAAApB,AAAM6B;AAAN,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAAzB;;;AAAA,AAAA,AAAA,AAAA,AAAMyB,AACDnB;AADL,AAEE,AAAI,AAACC,AAAO,AAACC,AAAQC,AAAEvB,AAASoB;AAASpB;;AACvC,AAAMoB,AAAQ,AAAA,AAACiB,AAASrC,AAASoB;AAAjC,AACE,AAAI,AAACI,AAAWJ;AAAS,AAACK,AAAML;;AAAhC,AAAA,AAAA,AAAA,AACsBA;;;;;AAL5B,AAAA,AAAA,AAAMmB;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAqB;;;AAAA,AAOA;;;AAAA,AAAMC,AACHC;AADH,AAEE,AAAI,AAAA,AAACvC,AAAEuC;AAAM1C;;AAAb,AAAA,AAAA,AAAA,AACwB0C;;;AAE1B;;;AAAA,AAAMC,AACHD;AADH,AAEE,AAAI,AAAA,AAACvC,AAAEuC;AAAM1C;;AAAb,AAAA,AAAA,AAAA,AAC6B0C;;;AAE/B,AAAA;;;AAAA,AAAAhC,AAAMmC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMuC,AAEFC;AAFJ,AAGG,AAACC,AAAaD,AAAWA;;;AAH5B,AAAA,AAAA,AAAMD,AAIFG,AAAGC;AAJP,AAKG,AAAQ,AAAID,AAAGC;AAAf;AAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA,AAAA,AAAA,AAAA;;;AALH,AAAA,AAAA,AAAA,AAAA,AAMmB0C,AAAOC;;;AAN1B,AAAA,AAAA,AAAMJ;;AAAN,AASG;;;;AAAA,AAAOK,AAGJC;AAHH,AAIE,AAAI,AAACC,AAAQD;AACX,AAAAE,AAAY,AAAA,AAAS,AAAUF,AAAI,AAACG,AAAaH;;AACjDA;;;AAEP;;;AAAA,AAAMI,AACHJ;AADH,AAEE,AAAI,AAAA,AAAChD,AAAEgD;AAAMnD;;AAAb,AAAA,AAAA,AAAA,AAEa,AAAI,AAACwD,AAAWL,AACHD;;;AAE5B;;;AAAA,AAAMO,AACHf;AADH,AAAA,AAAA,AAAA,AAAA,AAEqBA;;AAErB;;;AAAA,AAAMgB,AACHxD;AADH,AAAA,AAAA,AAAA,AAAA,AAEsBA;;AAEtB;;;AAAA,AAAMyD,AACHzD;AADH,AAAA,AAAA,AAAA,AAAA,AAEqBA;;AAErB;;;AAAA,AAAM0D,AACH1D;AADH,AAEE,AAAA,AAAA,AAAC2D,AAAM3D;;AAET;;;;AAAA,AAAM4D,AAEH5D;AAFH,AAGE,AAAC6D,AAAI7D,AAAO8D;;AAId;;;AAAA,AAAMC,AAEH/D;AAFH,AAGE,AAACC,AAAE,AAAA,AAAMD,AAAQ8D;;AAEnB;;;AAAA,AAAME,AAEHhE;AAFH,AAGE,AAAMA,AAAO,AAAI,AAAA,AAAOA,AAAQ,AAAA,AAACiE,AAAOjE,AAAcA;AAAtD,AACE,AACE,AAAA,AAASA;AAAQ,AAAA,AAAC2D,AAAM3D,AAAe,AAAAkE,AAAgB,AAAA,AAASlE;AAAzB,AAAA,AAAAkE,AAAAA,AAACF,AAAAA,AAAAA;;;AAD1C,AAEE,AAAA,AAAUhE;AAAQ,AAAA,AAAC2D,AAAM3D,AAAgB,AAACmE,AAAIH,AAAe,AAAA,AAAUhE;;AAFzE,AAGE,AAAA,AAACC,AAAE,AAAA,AAAMD;AAAc,AAAA,AAAC2D,AAAM3D,AACS,AAAAoE,AAAgB,AAAA,AAAUpE;AAA1B,AAAA,AAAAoE,AAAAA,AAACJ,AAAAA,AAAAA;AADjB,AAEgB,AAAAK,AAAgB,AAAA,AAAUrE;AAA1B,AAAA,AAAAqE,AAAAA,AAACL,AAAAA,AAAAA;;;AAL1C,AAMQhE;;;;;;AAEZ;;;AAAA,AAAMsE,AAEHC;AAFH,AAGE,AAAA,AAACC,AAAQ,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAA3D,AAAAyD;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA4zEwC,AAAA+D,AAAAnE;AA5zExCK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOW;AAAP,AAAAT,AAAAF,AAAA,AAAA,AAASY;AAAT,AAAA,AAAA,AAAAT,AAAAN,AAAA,AACGc,AAAE,AAAC/B,AAAegC;;AADrB,AAAA,AAAAb,AAAA;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAjB;;AAAA,AAAAc,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAArE,AAAAmD;AAAA,AAAAY,AAAAM,AAAA,AAAA,AAAOG;AAAP,AAAAT,AAAAM,AAAA,AAAA,AAASI;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAApB,AACGqB,AAAE,AAAC/B,AAAegC;;;AADrB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvB,AAAYF;;;AAGvB;;;AAAA,AAAM0B,AAEHC,AAAe3B;AAFlB,AAGE,AAAA4B,AAAmB,AAACE,AAAAA,AAAAA,AAAgBH,AAAAA;AAApC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAAC5B,AAAQ,AAAAC,AAAA,AAAA6B;AAAA,AAAA,AAAA3B,AAAA,AAAA;AAAA,AAAA,AAAA2B,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAA3D,AAAAqF;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA,AAAAC,AAAAyB;AAAA,AAAAxB,AAqzEsC,AAAA+D,AAAAvC;AArzEtCvB,AAAA,AAAAC,AAAAF;AAAAyB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzB;AAAA,AAAA0B,AAAA,AAAApB,AAAAP,AAAA0B;AAAA,AAAAlB,AAAAmB,AAAA,AAAA,AAAOV;AAAP,AAAAT,AAAAmB,AAAA,AAAA,AAAST;AAAT,AAAA,AAAA,AAAAT,AAAAgB,AAAA,AACGR,AAAE,AAAA,AAACpC,AAAMqC,AAAO,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;AAD9B,AAAA,AAAAS,AAAA;;;;AAAA;;;;;AAAA,AAAAhB,AAAA,AAAAC,AAAAc,AAAA,AAAAG,AAAA,AAAAf,AAAAW;;AAAA,AAAAd,AAAA,AAAAC,AAAAc,AAAA;;;AAAA,AAAAI,AAAA,AAAApF,AAAA+E;AAAA,AAAAhB,AAAAqB,AAAA,AAAA,AAAOZ;AAAP,AAAAT,AAAAqB,AAAA,AAAA,AAASX;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAa,AAAA,AAAAZ,AAAAQ,AACGP,AAAE,AAAA,AAACpC,AAAMqC,AAAO,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;;AAD9B;;;;AAAA,AAAA;;AAAA,AAAA,AAAAtB,AAAYF;;;AAErB,AAAA,AAAA,AAACqC,AAC0BV;;;AAE/B;;;AAAA,AAAMW,AAEHX,AAAe3B;AAFlB,AAGE,AAAA4B,AAAmB,AAACE,AAAAA,AAAAA,AAAgBH,AAAAA;AAApC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAAC5B,AAAQ,AAAAC,AAAA,AAAAqC;AAAA,AAAA,AAAAnC,AAAA,AAAA;AAAA,AAAA,AAAAmC,AAAAA;;AAAA,AAAA,AAAAlC,AAAA,AAAA3D,AAAA6F;AAAA,AAAA,AAAAlC;AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAA,AAAAC,AAAAiC;AAAA,AAAAhC,AA4yEsC,AAAA+D,AAAA/B;AA5yEtC/B,AAAA,AAAAC,AAAAF;AAAAiC,AAAA,AAAA7B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAiC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAjC;AAAA,AAAAkC,AAAA,AAAA5B,AAAAP,AAAAkC;AAAA,AAAA1B,AAAA2B,AAAA,AAAA,AAAOlB;AAAP,AAAAT,AAAA2B,AAAA,AAAA,AAASjB;AAAT,AAAA,AAAA,AAAAT,AAAAwB,AAAA,AACGhB,AAAE,AAAA,AAACpC,AAAM,AAACK,AAAegC,AAAQ,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;AAD/C,AAAA,AAAAiB,AAAA;;;;AAAA;;;;;AAAA,AAAAxB,AAAA,AAAAC,AAAAsB,AAAA,AAAAG,AAAA,AAAAvB,AAAAmB;;AAAA,AAAAtB,AAAA,AAAAC,AAAAsB,AAAA;;;AAAA,AAAAI,AAAA,AAAA5F,AAAAuF;AAAA,AAAAxB,AAAA6B,AAAA,AAAA,AAAOpB;AAAP,AAAAT,AAAA6B,AAAA,AAAA,AAASnB;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAqB,AAAA,AAAApB,AAAAgB,AACGf,AAAE,AAAA,AAACpC,AAAM,AAACK,AAAegC,AAAQ,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;;AAD/C;;;;AAAA,AAAA;;AAAA,AAAA,AAAAtB,AAAYF;;;AAErB,AAAA,AAAA,AAACqC,AAC0BV;;;AAK/B,AAAA,AAAMkB,AAAwBpH,AAAOqH;AAArC,AACE,AAAAC,AAAM,AAAA,AAAMtH;AAAZsH,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;AACiBtH;;;AADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqC,AAAA,AAAA,AAACwH,AAAUxH,AAAiBoH,AAAuBC;;;AAFxF;AAAA;AAGc,AAAA,AAAC1D,AAAM3D,AACA,AAAA,AAAAyH,AAACtD;AAAD,AAAM,AAAAsD,AAAAA,AAACL,AAAAA,AAAAA,AAAyBC,AAAAA;AAAW,AAAA,AAAUrH;;;AAJ1E;AAKO,AAAA,AAAC2D,AAAM3D,AACS,AAAA0H,AAAwB,AAAA,AAAU1H;AAAlC2H,AAA0CN;AAA1C,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;AADjB,AAEgB,AAAAQ,AAAwB,AAAA,AAAU5H;AAAlC6H,AAA0CR;AAA1C,AAAA,AAAAO,AAAAC,AAAAD,AAAAC,AAACT,AAAAA,AAAAA;;;;AAPxB;AAAA;AAAA;AAYE,AAAI,AAAA,AAAMpH;AACR,AAAA,AAAC2D,AAAM,AAACmE,AAAIT,AAAU,AAAA,AAACpD,AAAOjE,AAAmB,AAAA,AAAMA;;AACvD,AAAC8H,AAAIT,AAAUrH;;;;;AAdnB,AAAA,AAAAI,AAAA,AAAA,AAAAkH;;;;AAgBF,AAAA,AAAMS,AAAiBxD,AAAQyD,AAAMC,AAAWC;AAAhD,AACE,AAAMb,AAAU,AAAC3D,AAAK,AAAC3D,AAAI,AAACwD,AAAG2E;AACzBD,AAAW,AAACtE,AAAMsE,AAAWC,AAAS,AAACtE,AAAS,AAACqE,AAAAA,AAAAA,AAAWC,AAAAA;AAC5DC,AAAiB,AAAA,AAAC3D,AACK,AAAAC,AAAA,AAAA2D;AAAA,AAAA,AAAAzD,AAAA,AAAA;AAAA,AAAA,AAAAyD,AAAAA;;AAAA,AAAA,AAAAxD,AAAA,AAAA3D,AAAAmH;AAAA,AAAA,AAAAxD;AAAA,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAA,AAAAC,AAAAuD;AAAA,AAAAtD,AA+wEoB,AAAA+D,AAAAT;AA/wEpBrD,AAAA,AAAAC,AAAAF;AAAAuD,AAAA,AAAAnD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAuD,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvD;AAAA,AAAAwD,AAAA,AAAAlD,AAAAP,AAAAwD;AAAA,AAAAhD,AAAAiD,AAAA,AAAA,AAAOG;AAAP,AAAApD,AAAAiD,AAAA,AAAA,AAAUvI;AAAV,AAAA,AAAA,AAAAuF,AAAA8C,AAAA,AACGK,AAAG,AAACtB,AAAuBpH,AAAOqH;;AADrC,AAAA,AAAAiB,AAAA;;;;AAAA;;;;;AAAA,AAAA9C,AAAA,AAAAC,AAAA4C,AAAA,AAAAG,AAAA,AAAA7C,AAAAyC;;AAAA,AAAA5C,AAAA,AAAAC,AAAA4C,AAAA;;;AAAA,AAAAI,AAAA,AAAAlH,AAAA6G;AAAA,AAAA9C,AAAAmD,AAAA,AAAA,AAAOC;AAAP,AAAApD,AAAAmD,AAAA,AAAA,AAAUzI;AAAV,AAAA,AAAA6F,AAAA,AAAA,AAAA2C,AAAA,AAAA1C,AAAAsC,AACGM,AAAG,AAACtB,AAAuBpH,AAAOqH;;;AADrC;;;;AAAA,AAAA;;AAAA,AAAA,AAAA5C,AAAkBF;;AAEzCoE,AAAc,AAAChF,AAAMwE,AAAiBH,AACjB,AAAA,AAACrE,AAAM,AAACmE,AAAI,AAAA,AAAC7D,AAAO,AAACkE,AAAAA,AAAAA,AAAiBH,AAAAA,AAC1BX,AACA,AAAA,AAAM,AAACc,AAAAA,AAAAA,AAAiBH,AAAAA;AAR/D,AASE,AAACY,AAAMD,AAAcV","names",["instaparse.combinators-source/Epsilon","instaparse.combinators-source/opt","parser","cljs.core._EQ_","instaparse.combinators-source/plus","instaparse.combinators-source/star","js/Error","instaparse.combinators-source/rep","m","n","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","instaparse.combinators-source/alt","seq28704","self__4724__auto__","cljs.core/seq","parsers","cljs.core/every?","cljs.core.partial","cljs.core/=","instaparse.reduction/singleton?","cljs.core/first","instaparse.combinators-source/ord2","parser1","parser2","G__28709","instaparse.combinators-source/ord","args-arr__4757__auto__","argseq__4758__auto__","seq28707","G__28708","cljs.core/next","self__4723__auto__","cljs.core.remove","cljs.core.apply","instaparse.combinators-source/cat","seq28710","instaparse.combinators-source/string","s","instaparse.combinators-source/string-ci","G__28715","instaparse.combinators-source/unicode-char","code-point","instaparse.combinators_source.unicode_char","lo","hi","instaparse.combinators-source/add-beginning-constraint","r","cljs.core/regexp?","js/RegExp","instaparse.util/regexp-flags","instaparse.combinators-source/regexp","cljs.core/re-pattern","instaparse.combinators-source/nt","instaparse.combinators-source/look","instaparse.combinators-source/neg","instaparse.combinators-source/hide","cljs.core.assoc","instaparse.combinators-source/hide-tag","instaparse.reduction/red","instaparse.reduction/raw-non-terminal-reduction","instaparse.combinators-source/hidden-tag?","instaparse.combinators-source/unhide-content","cljs.core.dissoc","G__28721","cljs.core.map","G__28722","G__28723","instaparse.combinators-source/unhide-all-content","grammar","cljs.core.into","iter__4529__auto__","s__28725","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28727","cljs.core/chunk-buffer","i__28726","vec__28728","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28724","cljs.core/chunk-rest","vec__28732","cljs.core/cons","cljs.core/rest","k","v","instaparse.combinators-source/unhide-tags","reduction-type","temp__5733__auto__","reduction","instaparse.reduction/reduction-types","s__28736","b__28738","i__28737","vec__28739","iter__28735","vec__28742","instaparse.util.throw_illegal_argument_exception","instaparse.combinators-source/unhide-all","s__28746","b__28748","i__28747","vec__28749","iter__28745","vec__28752","instaparse.combinators-source/auto-whitespace-parser","ws-parser","G__28756","cljs.core/Keyword","cljs.core.update_in","p1__28755#","G__28757","G__28758","G__28759","G__28760","instaparse.combinators_source.cat","instaparse.combinators-source/auto-whitespace","start","grammar-ws","start-ws","modified-grammar","s__28762","b__28764","i__28763","vec__28765","iter__28761","vec__28768","nt","final-grammar","cljs.core.merge","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$instaparse.combinators-source/auto-whitespace-parser","~$instaparse.combinators-source/Epsilon","~$js/RegExp","~$instaparse.combinators-source/auto-whitespace","~$cljs.core/=","~$instaparse.combinators-source/alt","~$instaparse.reduction/singleton?","~$cljs.core/partial","~$instaparse.combinators-source/plus","~$instaparse.combinators-source/ord","~$cljs.core/seq","~$cljs.core/apply","~$instaparse.combinators-source/ord2","~$instaparse.combinators-source/cat","~$instaparse.combinators-source/look","~$cljs.core/dissoc","~$instaparse.combinators-source/rep","~$instaparse.util/regexp-flags","~$instaparse.combinators-source/neg","~$instaparse.combinators-source/star","~$instaparse.combinators-source/nt","~$instaparse.combinators-source/opt","~$cljs.core/into","~$cljs.core/re-pattern","~$instaparse.combinators-source/unhide-all","~$cljs.core/map","~$instaparse.combinators-source/regexp","~$instaparse.combinators-source/string","~$instaparse.reduction/red","~$instaparse.combinators-source/hide-tag","~$instaparse.util/throw-illegal-argument-exception","~$instaparse.combinators-source/unhide-content","~$instaparse.reduction/raw-non-terminal-reduction","~$instaparse.combinators-source/unhide-all-content","~$cljs.core/assoc","~$instaparse.combinators-source/unhide-tags","~$instaparse.combinators-source/hidden-tag?","~$instaparse.combinators-source/add-beginning-constraint","~$cljs.core/first","~$cljs.core/regexp?","~$instaparse.combinators-source/hide","~$instaparse.combinators-source/string-ci","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$js/Error","~$instaparse.combinators-source/unicode-char"]]],"~:cache-keys",["~#cmap",[["^1=","instaparse/auto_flatten_seq.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","^S"]]],["^1=","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.dom.HtmlElement"]]],["^1=","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.array","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1=","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2W"]]],["^1=","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T"]]],["^1=","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T"]]],"~:SHADOW-TIMESTAMP",[1610389887000,1610389887000,1609369123000],["^1=","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","~$goog.reflect"]]],["^1=","instaparse/reduction.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^S","~$instaparse.auto-flatten-seq","^R"]]],["^1=","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","~$goog.html.trustedtypes","^2Z","^2[","^30","^31"]]],["^1=","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","~$goog.html.SafeUrl","^30","^31","^2W"]]],["^1=","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^36","^2Y","~$goog.html.uncheckedconversions","^30","^2W"]]],["^1=","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","~$goog.dom.TagName","~$goog.dom.tags","^3:","^3;","~$goog.html.SafeStyleSheet","^36","^2Y","^35","^2Z","^2[","~$goog.labs.userAgent.browser","^2V","^30","^31","^2W"]]],["^1=","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2V"]]],["^1=","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",[]]],["^1=","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2V"]]],["^1=","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.dom.safe","^3<","^30","^2W"]]],["^1=","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2W"]]],["^1=","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","^38","~$goog.math"]]],["^1=","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","^39","^3:","^3;","^3A","^36","^2Y","^30","^2W"]]],["^1=","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T"]]],["^1=","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","~$goog.math.Long","~$goog.math.Integer","^3E","^2V","^2S","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1=","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","^35","^30","^31"]]],["^1=","instaparse/util.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^S"]]],["^1=","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","^3;","^2V","^30","^31","^2W"]]],["^1=","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^33"]]],["^1=","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2S","^2T","^3E"]]],["^1=","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^2T","^31"]]],["^1=","instaparse/combinators_source.cljc"],["7a45f597a37b77d6f2257e499ebafbf2f15af576","^2N",["^ ","^2O",null,"^2P",["^I",[]],"^2Q",["^T","^S","^Q","^R"]]]]],"~:clj-info",["^ ","jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1609369123000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1609185187000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1609517419000,"jar:file:/Users/ericauld/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1609185187000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is the underlying implementation of the various combinators.","^7","instaparse/combinators_source.cljc","^8",1,"^9",5,"^:",1,"^;",34],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",["^J"]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^T"],"^U",["^I",["^V"]],"~:shadow/js-access-global",["^I",["RegExp","Error"]],"^W",["^ ","^X","^Q","^Y","^Q","^Z","^Q","^[","^Q","^10","^R","^11","^R"],"~:defs",["^ ","~$unhide-tags",["^ ","~:protocol-inline",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",141,"^9",7,"^:",141,"^;",18,"~:arglists",["^14",["~$quote",["^14",[["~$reduction-type","~$grammar"]]]]],"^6","Recursively undoes the effect of hide-tag"],"^K","^2@","^7","instaparse/combinators_source.cljc","^;",18,"~:method-params",["^14",[["^4E","^4F"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^9",1,"~:variadic?",false,"^8",141,"~:ret-tag",["^I",[null,"~$clj","~$any"]],"^:",141,"~:max-fixed-arity",2,"~:fn-var",true,"^4C",["^14",["^4D",["^14",[["^4E","^4F"]]]]],"^6","Recursively undoes the effect of hide-tag"],"~$auto-whitespace",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",179,"^9",7,"^:",179,"^;",22,"^4C",["^14",["^4D",["^14",[["^4F","~$start","~$grammar-ws","~$start-ws"]]]]]],"^K","^1L","^7","instaparse/combinators_source.cljc","^;",22,"^4G",["^14",[["^4F","^4Q","^4R","^4S"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",179,"^4K",["^I",["^4M","~$clj-nil"]],"^:",179,"^4N",4,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4F","^4Q","^4R","^4S"]]]]]],"~$string-ci",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",66,"^9",7,"^:",66,"^;",16,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Create a case-insensitive string terminal out of s"],"^K","^2F","^7","instaparse/combinators_source.cljc","^;",16,"^4G",["^14",[["~$s"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",66,"^4K","~$cljs.core/IMap","^:",66,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Create a case-insensitive string terminal out of s"],"~$add-beginning-constraint",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",80,"^9",11,"^:",80,"^;",35,"~:private",true,"^4C",["^14",["^4D",["^14",[["~$r"]]]]],"^6","JavaScript regexes have no .lookingAt method, so in cljs we just\n  add a '^' character to the front of the regex."],"^4X",true,"^K","^2B","^7","instaparse/combinators_source.cljc","^;",35,"^4G",["^14",[["~$r"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",4,"^4J",false,"^8",80,"^4K",["^I",[null,"^1K"]],"^:",80,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$r"]]]]],"^6","JavaScript regexes have no .lookingAt method, so in cljs we just\n  add a '^' character to the front of the regex."],"~$auto-whitespace-parser",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",162,"^9",7,"^:",162,"^;",29,"^4C",["^14",["^4D",["^14",[["~$parser","~$ws-parser"]]]]]],"^K","^1I","^7","instaparse/combinators_source.cljc","^;",29,"^4G",["^14",[["^4Z","^4["]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",162,"^:",162,"^4N",2,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z","^4["]]]]]],"~$opt",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",13,"^9",7,"^:",13,"^;",10,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Optional, i.e., parser?"],"^K","^22","^7","instaparse/combinators_source.cljc","^;",10,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",13,"^4K","^4V","^:",13,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Optional, i.e., parser?"],"~$neg",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",103,"^9",7,"^:",103,"^;",10,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Negative lookahead, i.e., !parser"],"^K","^1[","^7","instaparse/combinators_source.cljc","^;",10,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",103,"^4K","^4V","^:",103,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Negative lookahead, i.e., !parser"],"^J",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",54,"^9",7,"^:",54,"^;",10,"^4C",["^14",["^4D",["^14",[["~$&","~$parsers"]]]]],"^6","Concatenation, i.e., parser1 parser2 ...","~:top-fn",["^ ","^4J",true,"~:fixed-arity",0,"^4N",0,"^4G",[["^14",["^52"]]],"^4C",["^14",[["~$&","^52"]]],"^4I",["^14",[null]]]],"^K","^1V","^7","instaparse/combinators_source.cljc","^;",10,"^53",["^ ","^4J",true,"^54",0,"^4N",0,"^4G",[["^14",["^52"]]],"^4C",["^14",[["~$&","^52"]]],"^4I",["^14",[null]]],"^4G",[["^14",["^52"]]],"^4H",null,"^54",0,"^4I",["^14",[null]],"^9",1,"^4J",true,"~:methods",[["^ ","^54",0,"^4J",true,"~:tag",["^I",["^4M","^4V","^4T"]]]],"^8",54,"^4K","^4M","^:",54,"^4N",0,"^4O",true,"^4C",["^14",[["~$&","^52"]]],"^6","Concatenation, i.e., parser1 parser2 ..."],"~$ord",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",44,"^9",7,"^:",44,"^;",10,"^4C",["^14",["^4D",["^14",[[],["~$parser1","~$&","^52"]]]]],"^6","Ordered choice, i.e., parser1 / parser2","^53",["^ ","^4J",true,"^54",1,"^4N",1,"^4G",[[]],"^4C",["^14",[[],["^58","~$&","^52"]]],"^4I",["^14",[null,null]]]],"^K","^1R","^7","instaparse/combinators_source.cljc","^;",10,"^53",["^ ","^4J",true,"^54",1,"^4N",1,"^4G",[[]],"^4C",["^14",[[],["^58","~$&","^52"]]],"^4I",["^14",[null,null]]],"^4G",[[]],"^4H",null,"^54",1,"^4I",["^14",[null,null]],"^9",1,"^4J",true,"^55",[["^ ","^54",0,"^4J",false,"^56","^4V"],["^ ","^54",1,"^4J",true,"^56",["^I",[null,"^4V"]]]],"^8",44,"^:",44,"^4N",1,"^4O",true,"^4C",["^14",[[],["^58","~$&","^52"]]],"^6","Ordered choice, i.e., parser1 / parser2"],"~$hide-tag",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",111,"^9",7,"^:",111,"^;",15,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."],"^K","^2:","^7","instaparse/combinators_source.cljc","^;",15,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",111,"^4K",["^I",["^4L","^4M"]],"^:",111,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."],"~$alt",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",34,"^9",7,"^:",34,"^;",10,"^4C",["^14",["^4D",["^14",[["~$&","^52"]]]]],"^6","Alternation, i.e., parser1 | parser2 | parser3 | ...","^53",["^ ","^4J",true,"^54",0,"^4N",0,"^4G",[["^14",["^52"]]],"^4C",["^14",[["~$&","^52"]]],"^4I",["^14",[null]]]],"^K","^1N","^7","instaparse/combinators_source.cljc","^;",10,"^53",["^ ","^4J",true,"^54",0,"^4N",0,"^4G",[["^14",["^52"]]],"^4C",["^14",[["~$&","^52"]]],"^4I",["^14",[null]]],"^4G",[["^14",["^52"]]],"^4H",null,"^54",0,"^4I",["^14",[null]],"^9",1,"^4J",true,"^55",[["^ ","^54",0,"^4J",true,"^56",["^I",["^4M","^4V","^4T"]]]],"^8",34,"^4K","^4M","^:",34,"^4N",0,"^4O",true,"^4C",["^14",[["~$&","^52"]]],"^6","Alternation, i.e., parser1 | parser2 | parser3 | ..."],"~$ord2",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",41,"^9",8,"^:",41,"^;",12,"^4X",true,"^4C",["^14",["^4D",["^14",[["^58","~$parser2"]]]]]],"^4X",true,"^K","^1U","^7","instaparse/combinators_source.cljc","^;",12,"^4G",["^14",[["^58","^5<"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",41,"^4K","^4V","^:",41,"^4N",2,"^4O",true,"^4C",["^14",["^4D",["^14",[["^58","^5<"]]]]]],"~$look",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",99,"^9",7,"^:",99,"^;",11,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Lookahead, i.e., &parser"],"^K","^1W","^7","instaparse/combinators_source.cljc","^;",11,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",99,"^4K","^4V","^:",99,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Lookahead, i.e., &parser"],"~$unhide-content",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",123,"^9",7,"^:",123,"^;",21,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Recursively undoes the effect of hide on one parser"],"^K","^2<","^7","instaparse/combinators_source.cljc","^;",21,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",123,"^4K",["^I",[null,"^4L","^4M","^4T"]],"^:",123,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Recursively undoes the effect of hide on one parser"],"~$nt",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",95,"^9",7,"^:",95,"^;",9,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Refers to a non-terminal defined by the grammar map"],"^K","^21","^7","instaparse/combinators_source.cljc","^;",9,"^4G",["^14",[["~$s"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",95,"^4K","^4V","^:",95,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Refers to a non-terminal defined by the grammar map"],"~$unhide-all-content",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",135,"^9",7,"^:",135,"^;",25,"^4C",["^14",["^4D",["^14",[["^4F"]]]]],"^6","Recursively undoes the effect of hide on all parsers in the grammar"],"^K","^2>","^7","instaparse/combinators_source.cljc","^;",25,"^4G",["^14",[["^4F"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",135,"^4K",["^I",[null,"^4L","^4M"]],"^:",135,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4F"]]]]],"^6","Recursively undoes the effect of hide on all parsers in the grammar"],"~$rep",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",28,"^9",7,"^:",28,"^;",10,"^4C",["^14",["^4D",["^14",[["~$m","~$n","^4Z"]]]]],"^6","Between m and n repetitions"],"^K","^1Y","^7","instaparse/combinators_source.cljc","^;",10,"^4G",["^14",[["~$m","~$n","^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",28,"^4K","^4V","^:",28,"^4N",3,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$m","~$n","^4Z"]]]]],"^6","Between m and n repetitions"],"~$unicode-char",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",71,"^9",7,"^:",71,"^;",19,"^4C",["^14",["^4D",["^14",[["~$code-point"],["~$lo","~$hi"]]]]],"^6","Matches a Unicode code point or a range of code points","^53",["^ ","^4J",false,"^54",2,"^4N",2,"^4G",[["^5C"],["^5D","^5E"]],"^4C",["^14",[["^5C"],["^5D","^5E"]]],"^4I",["^14",[null,null]]]],"^K","^2K","^7","instaparse/combinators_source.cljc","^;",19,"^53",["^ ","^4J",false,"^54",2,"^4N",2,"^4G",[["^5C"],["^5D","^5E"]],"^4C",["^14",[["^5C"],["^5D","^5E"]]],"^4I",["^14",[null,null]]],"^4G",[["^5C"],["^5D","^5E"]],"^4H",null,"^54",2,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^55",[["^ ","^54",1,"^4J",false,"^56","^4M"],["^ ","^54",2,"^4J",false,"^56","^4V"]],"^8",71,"^:",71,"^4N",2,"^4O",true,"^4C",["^14",[["^5C"],["^5D","^5E"]]],"^6","Matches a Unicode code point or a range of code points"],"~$star",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",23,"^9",7,"^:",23,"^;",11,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Zero or more, i.e., parser*"],"^K","^20","^7","instaparse/combinators_source.cljc","^;",11,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",23,"^4K","^4V","^:",23,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Zero or more, i.e., parser*"],"~$string",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",61,"^9",7,"^:",61,"^;",13,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Create a string terminal out of s"],"^K","^28","^7","instaparse/combinators_source.cljc","^;",13,"^4G",["^14",[["~$s"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",61,"^4K","^4V","^:",61,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$s"]]]]],"^6","Create a string terminal out of s"],"~$hide",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",107,"^9",7,"^:",107,"^;",11,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Hide the result of parser, i.e., <parser>"],"^K","^2E","^7","instaparse/combinators_source.cljc","^;",11,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",107,"^4K",["^I",["^4L","^4M"]],"^:",107,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Hide the result of parser, i.e., <parser>"],"~$unhide-all",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",150,"^9",7,"^:",150,"^;",17,"^4C",["^14",["^4D",["^14",[["^4E","^4F"]]]]],"^6","Recursively undoes the effect of both hide and hide-tag"],"^K","^25","^7","instaparse/combinators_source.cljc","^;",17,"^4G",["^14",[["^4E","^4F"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",150,"^4K",["^I",[null,"^4L","^4M"]],"^:",150,"^4N",2,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4E","^4F"]]]]],"^6","Recursively undoes the effect of both hide and hide-tag"],"~$regexp",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",88,"^9",7,"^:",88,"^;",13,"^4C",["^14",["^4D",["^14",[["~$r"]]]]],"^6","Create a regexp terminal out of regular expression r"],"^K","^27","^7","instaparse/combinators_source.cljc","^;",13,"^4G",["^14",[["~$r"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",88,"^4K","^4V","^:",88,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["~$r"]]]]],"^6","Create a regexp terminal out of regular expression r"],"~$Epsilon",["^ ","^K","^1J","^7","instaparse/combinators_source.cljc","^8",11,"^9",1,"^:",11,"^;",13,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",11,"^9",6,"^:",11,"^;",13],"^56","^4V"],"~$plus",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",18,"^9",7,"^:",18,"^;",11,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","One or more, i.e., parser+"],"^K","^1Q","^7","instaparse/combinators_source.cljc","^;",11,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",18,"^4K","^4V","^:",18,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","One or more, i.e., parser+"],"~$hidden-tag?",["^ ","^4B",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",118,"^9",7,"^:",118,"^;",18,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Tests whether parser was created with hide-tag combinator"],"^K","^2A","^7","instaparse/combinators_source.cljc","^;",18,"^4G",["^14",[["^4Z"]]],"^4H",null,"^4I",["^14",[null,null]],"^9",1,"^4J",false,"^8",118,"^4K","~$boolean","^:",118,"^4N",1,"^4O",true,"^4C",["^14",["^4D",["^14",[["^4Z"]]]]],"^6","Tests whether parser was created with hide-tag combinator"]],"^12",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^I",["~:neg","~:parser2","~:cat","~:min","~:ord","~:else","~:alt","~:look","~:nt","~:rep","~:star","~:string","~:lo","~:hide","~:parser","~:regexp","~:parser1","~:keyword","~:max","~:red","~:plus","~:epsilon","^56","~:parsers","~:string-ci","~:hi","~:char","~:opt"]],"~:order",["^56","^69","^62","^6>","^68","^5Z","^5S","^66","^5Y","^5U","^6:","^5V","^64","^5Q","^5T","^5R","^5[","^6;","^60","^6<","^6=","^63","^65","^5X","^5W","^5P","^61","^67"]],"^19",["^ ","^V",["^I",[]]],"^1:",["^ "],"^1;",["^T","^S","^Q","^R"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2M",[["^6B","~:static-fns"],true,["^6B","~:shadow-tweaks"],null,["^6B","~:source-map-inline"],null,["^6B","~:elide-asserts"],false,["^6B","~:optimize-constants"],null,["^6B","^1@"],null,["^6B","~:external-config"],null,["^6B","~:tooling-config"],null,["^6B","~:emit-constants"],null,["^6B","~:load-tests"],null,["^6B","~:form-size-threshold"],null,["^6B","~:data-readers"],null,["^6B","~:infer-externs"],"~:auto",["^6B","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6B","~:fn-invoke-direct"],null,["^6B","~:source-map"],"/dev/null"]]]